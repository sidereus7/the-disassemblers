00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 3/11/2015 4:50:10 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  68K Disassembler
00000000                             3  * Written by :  Chance O'Day, Sara Jackson, and Bonnie Vo
00000000                             4  * Date       :  3/6/2015
00000000                             5  * Description:  A disassembler program that will convert a
00000000                             6  *               memory image of instructions and data back
00000000                             7  *               to 68000 assembly language and output the
00000000                             8  *               disassembled code to the display.
00000000                             9  *
00000000                            10  *               Displays an opening message and prompts
00000000                            11  *               the user for the start and end address
00000000                            12  *               for the program to be disassembled.
00000000                            13  *-----------------------------------------------------------
00001000                            14                  ORG         $1000
00001000  4FF9 00007000             15  START:          LEA         stack,SP
00001006  43F9 00001A4E             16                  LEA         LINE1,A1                * Display welcome message to console
0000100C  103C 000E                 17                  MOVE.B      #14,D0
00001010  4E4F                      18                  TRAP        #15
00001012                            19              
00001012  43F9 00001A72             20                  LEA         GETSTARTMESSAGE,A1      * Display prompt for start address
00001018  103C 000E                 21                  MOVE.B      #14,D0
0000101C  4E4F                      22                  TRAP        #15
0000101E                            23                  
0000101E  1E3C 0001                 24                  MOVE.B      #1,D7
00001022  1C3C 0000                 25                  MOVE.B      #0,D6                   * Toggle for start/end address prompting: 0 = start, 1 = end
00001026                            26              
00001026  103C 0002                 27  PROMPTSTARTADDR MOVE.B      #2,D0                   * Read starting address string from console
0000102A  4E4F                      28                  TRAP        #15
0000102C                            29              
0000102C  143C 0008                 30                  MOVE.B      #8,D2
00001030  B441                      31                  CMP.W       D1,D2                   * Check start address size
00001032  6600 002E                 32                  BNE         ERRORINPUTSIZE          * Branch if address size error
00001036  143C 0004                 33                  MOVE.B      #4,D2
0000103A  163C 0000                 34                  MOVE.B      #0,D3
0000103E                            35                              
0000103E  45F9 00001C4E             36                  LEA         STARTADDRSTRING1,A2     * Load ASCII of the first half of start address to A2 register
00001044  14D9                      37  LOADSTARTADDR1  MOVE.B      (A1)+,(A2)+
00001046  5203                      38                  ADD.B       #1,D3
00001048  B602                      39                  CMP.B       D2,D3
0000104A  66F8                      40                  BNE         LOADSTARTADDR1
0000104C                            41                  
0000104C  163C 0000                 42                  MOVE.B      #0,D3
00001050  45F9 00001C52             43                  LEA         STARTADDRSTRING2,A2     * Load ASCII of the second half of start address to A2 register
00001056  14D9                      44  LOADSTARTADDR2  MOVE.B      (A1)+,(A2)+
00001058  5203                      45                  ADD.B       #1,D3
0000105A  B602                      46                  CMP.B       D2,D3
0000105C  66F8                      47                  BNE         LOADSTARTADDR2
0000105E  6000 001C                 48                  BRA         ENDADDR
00001062                            49              
00001062  43F9 00001AC0             50  ERRORINPUTSIZE  LEA         ERRORMESSAGESIZE,A1     * Start/End Address Error
00001068  103C 000E                 51                  MOVE.B      #14,D0
0000106C  4E4F                      52                  TRAP        #15
0000106E                            53                  
0000106E  43F9 00001B86             54                  LEA         BUGFIXMESSAGE,A1
00001074  BC07                      55                  CMP.B       D7,D6
00001076  66AE                      56                  BNE         PROMPTSTARTADDR
00001078  6000 0016                 57                  BRA         PROMPTENDADDR
0000107C                            58                  
0000107C  43F9 00001A9A             59  ENDADDR         LEA         GETENDMESSAGE,A1        * Display prompt for end address
00001082  103C 000E                 60                  MOVE.B      #14,D0
00001086  4E4F                      61                  TRAP        #15
00001088  1C3C 0001                 62                  MOVE.B      #1,D6
0000108C  143C 0008                 63                  MOVE.B      #8,D2
00001090                            64                  
00001090                            65                  
00001090  227C 00005000             66  PROMPTENDADDR   MOVEA.L     #$5000,A1
00001096  103C 0002                 67                  MOVE.B      #2,D0                   * Read end address string from console
0000109A  4E4F                      68                  TRAP        #15
0000109C                            69                  
0000109C  B441                      70                  CMP.W       D1,D2                   * Check end address size
0000109E  66C2                      71                  BNE         ERRORINPUTSIZE          * Branch if address size error
000010A0                            72                  
000010A0  143C 0004                 73                  MOVE.B      #4,D2
000010A4  163C 0000                 74                  MOVE.B      #0,D3
000010A8  45F9 00001C5A             75                  LEA         ENDADDRSTRING1,A2       * Load ASCII of the first half of end address to A2 register
000010AE  14D9                      76  LOADENDADDR1    MOVE.B      (A1)+,(A2)+
000010B0  5203                      77                  ADD.B       #1,D3
000010B2  B602                      78                  CMP.B       D2,D3
000010B4  66F8                      79                  BNE         LOADENDADDR1
000010B6                            80                  
000010B6  163C 0000                 81                  MOVE.B      #0,D3
000010BA  45F9 00001C5E             82                  LEA         ENDADDRSTRING2,A2       * Load ASCII of the second half of end address to A2 register
000010C0  14D9                      83  LOADENDADDR2    MOVE.B      (A1)+,(A2)+
000010C2  5203                      84                  ADD.B       #1,D3
000010C4  B602                      85                  CMP.B       D2,D3
000010C6  66F8                      86                  BNE         LOADENDADDR2
000010C8                            87                                 
000010C8  2239 00001C4E             88  CONVERTSTART1   MOVE.L      STARTADDRSTRING1,D1
000010CE  1C3C 0000                 89                  MOVE.B      #0,D6
000010D2  1A3C 0004                 90                  MOVE.B      #4,D5
000010D6  163C 0039                 91                  MOVE.B      #$39,D3
000010DA                            92                  
000010DA  1401                      93  NEXTCHAR        MOVE.B      D1,D2
000010DC  B602                      94                  CMP.B       D2,D3
000010DE  6D00 0016                 95                  BLT         CHARISLETTER
000010E2                            96                  
000010E2  0402 0030                 97  CHARISNUM       SUB.B       #48,D2
000010E6  1E02                      98                  MOVE.B      D2,D7
000010E8  E89F                      99                  ROR.L       #4,D7
000010EA  E099                     100                  ROR.L       #8,D1
000010EC  5206                     101                  ADD.B       #1,D6
000010EE  BA06                     102                  CMP.B       D6,D5
000010F0  6700 0018                103                  BEQ         CONVERTSTART2
000010F4  60E4                     104                  BRA         NEXTCHAR
000010F6                           105  
000010F6  0402 0037                106  CHARISLETTER    SUB.B       #55,D2
000010FA  1E02                     107                  MOVE.B      D2,D7
000010FC  E89F                     108                  ROR.L       #4,D7
000010FE  E099                     109                  ROR.L       #8,D1
00001100  5206                     110                  ADD.B       #1,D6
00001102  BA06                     111                  CMP.B       D6,D5
00001104  6700 0004                112                  BEQ         CONVERTSTART2
00001108  60D0                     113                  BRA         NEXTCHAR
0000110A                           114                  
0000110A  2239 00001C52            115  CONVERTSTART2   MOVE.L      STARTADDRSTRING2,D1
00001110  1C3C 0000                116                  MOVE.B      #0,D6
00001114  1A3C 0004                117                  MOVE.B      #4,D5
00001118  163C 0039                118                  MOVE.B      #$39,D3
0000111C                           119                  
0000111C  1401                     120  NEXTCHAR2       MOVE.B      D1,D2
0000111E  B602                     121                  CMP.B       D2,D3
00001120  6D00 0016                122                  BLT         CHARISLETTER2
00001124                           123  
00001124  0402 0030                124  CHARISNUM2      SUB.B       #48,D2
00001128  1802                     125                  MOVE.B      D2,D4
0000112A  E89C                     126                  ROR.L       #4,D4
0000112C  E099                     127                  ROR.L       #8,D1
0000112E  5206                     128                  ADD.B       #1,D6
00001130  BA06                     129                  CMP.B       D6,D5
00001132  6700 0018                130                  BEQ         COMBINESTART
00001136  60E4                     131                  BRA         NEXTCHAR2
00001138                           132  
00001138                           133                  
00001138  0402 0037                134  CHARISLETTER2   SUB.B       #55,D2
0000113C  1802                     135                  MOVE.B      D2,D4
0000113E  E89C                     136                  ROR.L       #4,D4
00001140  E099                     137                  ROR.L       #8,D1
00001142  5206                     138                  ADD.B       #1,D6
00001144  BA06                     139                  CMP.B       D6,D5
00001146  6700 0004                140                  BEQ         COMBINESTART
0000114A  60D0                     141                  BRA         NEXTCHAR2
0000114C                           142                  
0000114C  E09C                     143  COMBINESTART    ROR.L       #8,D4
0000114E  E09C                     144                  ROR.L       #8,D4
00001150  DE84                     145                  ADD.L       D4,D7
00001152  23C7 00001C56            146                  MOVE.L      D7,HEXSTARTADDR
00001158  7E00                     147                  MOVE.L      #$00000000,D7
0000115A  7800                     148                  MOVE.L      #$00000000,D4
0000115C                           149                  
0000115C  2239 00001C5A            150  CONVERTEND1     MOVE.L      ENDADDRSTRING1,D1
00001162  1C3C 0000                151                  MOVE.B      #0,D6
00001166  1A3C 0004                152                  MOVE.B      #4,D5
0000116A  163C 0039                153                  MOVE.B      #$39,D3
0000116E                           154                  
0000116E  1401                     155  NEXTCHAR3       MOVE.B      D1,D2
00001170  B602                     156                  CMP.B       D2,D3
00001172  6D00 0016                157                  BLT         CHARISLETTER3
00001176                           158                  
00001176  0402 0030                159  CHARISNUM3      SUB.B       #48,D2
0000117A  1E02                     160                  MOVE.B      D2,D7
0000117C  E89F                     161                  ROR.L       #4,D7
0000117E  E099                     162                  ROR.L       #8,D1
00001180  5206                     163                  ADD.B       #1,D6
00001182  BA06                     164                  CMP.B       D6,D5
00001184  6700 0018                165                  BEQ         CONVERTEND2
00001188  60E4                     166                  BRA         NEXTCHAR3
0000118A                           167  
0000118A  0402 0037                168  CHARISLETTER3   SUB.B       #55,D2
0000118E  1E02                     169                  MOVE.B      D2,D7
00001190  E89F                     170                  ROR.L       #4,D7
00001192  E099                     171                  ROR.L       #8,D1
00001194  5206                     172                  ADD.B       #1,D6
00001196  BA06                     173                  CMP.B       D6,D5
00001198  6700 0004                174                  BEQ         CONVERTEND2
0000119C  60D0                     175                  BRA         NEXTCHAR3
0000119E                           176                  
0000119E  2239 00001C5E            177  CONVERTEND2     MOVE.L      ENDADDRSTRING2,D1
000011A4  1C3C 0000                178                  MOVE.B      #0,D6
000011A8  1A3C 0004                179                  MOVE.B      #4,D5
000011AC  163C 0039                180                  MOVE.B      #$39,D3
000011B0                           181                  
000011B0  1401                     182  NEXTCHAR4       MOVE.B      D1,D2
000011B2  B602                     183                  CMP.B       D2,D3
000011B4  6D00 0016                184                  BLT         CHARISLETTER4
000011B8                           185  
000011B8  0402 0030                186  CHARISNUM4      SUB.B       #48,D2
000011BC  1802                     187                  MOVE.B      D2,D4
000011BE  E89C                     188                  ROR.L       #4,D4
000011C0  E099                     189                  ROR.L       #8,D1
000011C2  5206                     190                  ADD.B       #1,D6
000011C4  BA06                     191                  CMP.B       D6,D5
000011C6  6700 0018                192                  BEQ         COMBINEEND
000011CA  60E4                     193                  BRA         NEXTCHAR4
000011CC                           194  
000011CC                           195                  
000011CC  0402 0037                196  CHARISLETTER4   SUB.B       #55,D2
000011D0  1802                     197                  MOVE.B      D2,D4
000011D2  E89C                     198                  ROR.L       #4,D4
000011D4  E099                     199                  ROR.L       #8,D1
000011D6  5206                     200                  ADD.B       #1,D6
000011D8  BA06                     201                  CMP.B       D6,D5
000011DA  6700 0004                202                  BEQ         COMBINEEND
000011DE  60D0                     203                  BRA         NEXTCHAR4
000011E0                           204                  
000011E0  E09C                     205  COMBINEEND      ROR.L       #8,D4
000011E2  E09C                     206                  ROR.L       #8,D4
000011E4  DE84                     207                  ADD.L       D4,D7
000011E6  23C7 00001C62            208                  MOVE.L      D7,HEXENDADDR
000011EC  7E00                     209                  MOVE.L      #$00000000,D7
000011EE  7800                     210                  MOVE.L      #$00000000,D4
000011F0                           211  
000011F0                           212  *  TEST CODE FOR DEMONSTRATING THE VALUES IN THE VARIABLES                
000011F0                           213  *                MOVE.L      HEXSTARTADDR,D0
000011F0                           214  *                MOVE.L      HEXENDADDR,D1
000011F0                           215                  
000011F0                           216  *                MOVE.L      STARTADDRSTRING1,D2
000011F0                           217  *                MOVE.L      STARTADDRSTRING2,D3
000011F0                           218  *                MOVE.L      ENDADDRSTRING1,D4
000011F0                           219  *                MOVE.L      ENDADDRSTRING2,D5
000011F0                           220  
000011F0                           221  ****************************************************************************
000011F0                           222  *--------------------------------------------------------------------------*
000011F0                           223  ****************************************************************************
000011F0                           224  * Clear all registers to move on to next segment
000011F0  4280                     225                  CLR.L       D0
000011F2  4281                     226                  CLR.L       D1
000011F4  4282                     227                  CLR.L       D2
000011F6  4283                     228                  CLR.L       D3
000011F8  4284                     229                  CLR.L       D4
000011FA  4285                     230                  CLR.L       D5
000011FC  4286                     231                  CLR.L       D6
000011FE  4287                     232                  CLR.L       D7
00001200  2040                     233                  MOVE.L      D0,A0
00001202  2240                     234                  MOVE.L      D0,A1
00001204  2440                     235                  MOVE.L      D0,A2
00001206  2640                     236                  MOVE.L      D0,A3
00001208  2840                     237                  MOVE.L      D0,A4
0000120A  2A40                     238                  MOVE.L      D0,A5
0000120C  2C40                     239                  MOVE.L      D0,A6
0000120E  2E40                     240                  MOVE.L      D0,A7                
00001210                           241  
00001210                           242  *-----------------------TEST CODE-----------------------------------------------------                
00001210  33FC 1207 C0680000       243                  MOVE.W      #$1207,$C0680000        * Fills data to show that following code works correctly.
00001218  33FC 143C C0680002       244                  MOVE.W      #$143C,$C0680002
00001220  13FC 0017 C0680004       245                  MOVE.B      #$17,$C0680004
00001228  13FC 001A C0680005       246                  MOVE.B      #$1A,$C0680005
00001230  13FC 00BC C0680006       247                  MOVE.B      #$BC,$C0680006
00001238  13FC 0033 C0680007       248                  MOVE.B      #$33,$C0680007
00001240                           249                  
00001240  13FC 0098 C0680008       250                  MOVE.B      #$98,$C0680008
00001248  13FC 0014 C0680009       251                  MOVE.B      #$14,$C0680009          * SUB.B  (A4),D4
00001250                           252                  
00001250  13FC 0094 C068000A       253                  MOVE.B      #$94,$C068000A
00001258  13FC 0044 C068000B       254                  MOVE.B      #$44,$C068000B          * SUB.W  D4,D2
00001260                           255                  
00001260  13FC 0095 C068000C       256                  MOVE.B      #$95,$C068000C
00001268  13FC 0094 C068000D       257                  MOVE.B      #$94,$C068000D          * SUB.L  D2,(A4)
00001270                           258                  
00001270  13FC 0092 C068000E       259                  MOVE.B      #$92,$C068000E 
00001278  13FC 00DC C068000F       260                  MOVE.B      #$DC,$C068000F          * SUBA.W (A4)+,A1
00001280                           261                  
00001280  13FC 0099 C0680010       262                  MOVE.B      #$99,$C0680010
00001288  13FC 00CF C0680011       263                  MOVE.B      #$CF,$C0680011          * SUBA.L  A7,A4
00001290                           264                  
00001290                           265                * 0001 0100 0011 1100   = binary for MOVE.B immediate data to D2
00001290                           266  *--------------------------------------------------------------------------
00001290                           267                  
00001290  2479 00001C56            268  BEGIN_OP_IDENT  MOVE.L      HEXSTARTADDR,A2         * A2 is RESERVED for walking through the target code.
00001296                           269  
00001296  2039 00001C62            270  OP_IDENT        MOVE.L      HEXENDADDR,D0
0000129C  220A                     271                  MOVE.L      A2,D1
0000129E  B280                     272                  CMP.L       D0,D1
000012A0  6E00 07A8                273                  BGT         END                     * Branch to end if current address is greater than ending address.
000012A4                           274  
000012A4  220A                     275                  MOVE.L      A2,D1                   * Print current address.  TODO: Add tab **************************
000012A6  103C 000F                276                  MOVE.B      #15,D0
000012AA  143C 0010                277                  MOVE.B      #16,D2
000012AE  4E4F                     278                  TRAP        #15
000012B0                           279                  
000012B0  43F9 00001BEA            280                  LEA         TAB_MSG,A1
000012B6  103C 000E                281                  MOVE.B      #14,D0
000012BA  4E4F                     282                  TRAP        #15
000012BC                           283  
000012BC  1E1A                     284                  MOVE.B      (A2)+,D7       
000012BE  E15F                     285                  ROL.W       #8,D7
000012C0  1E1A                     286                  MOVE.B      (A2)+,D7                * D7 storing 16 bits of Machine Code into D7. Only WORD data is relevant.
000012C2                           287                  
000012C2  343C F000                288                  MOVE.W      #$F000,D2                
000012C6  C447                     289                  AND.W       D7,D2                   * D2 storing the nibble representing opcode.
000012C8  E09A                     290                  ROR.L       #8,D2
000012CA  E89A                     291                  ROR.L       #4,D2
000012CC                           292                  
000012CC  163C 0000                293                  MOVE.B      #OPCODE_0,D3            * ANDI,SUBI,EORI,CMPI,BCHG
000012D0  B602                     294                  CMP.B       D2,D3
000012D2  6700 00AC                295                  BEQ         PARSE_OP_0
000012D6                           296                  
000012D6  163C 0001                297                  MOVE.B      #OPCODE_1,D3            * MOVE BYTE
000012DA  B602                     298                  CMP.B       D2,D3
000012DC  6700 02A0                299                  BEQ         PARSE_OP_1
000012E0                           300                  
000012E0  163C 0002                301                  MOVE.B      #OPCODE_2,D3            * MOVE LONG
000012E4  B602                     302                  CMP.B       D2,D3
000012E6  6700 02FA                303                  BEQ         PARSE_OP_2                
000012EA                           304  
000012EA  163C 0003                305                  MOVE.B      #OPCODE_3,D3            * MOVE WORD
000012EE  B602                     306                  CMP.B       D2,D3
000012F0  6700 02F0                307                  BEQ         PARSE_OP_3
000012F4                           308                  
000012F4  163C 0004                309                  MOVE.B      #OPCODE_4,D3            * CLR,RTS,JSR,MOVEM,LEA
000012F8  B602                     310                  CMP.B       D2,D3
000012FA  6700 02E6                311                  BEQ         PARSE_OP_4
000012FE                           312                  
000012FE  163C 0005                313                  MOVE.B      #OPCODE_5,D3            * ADDQ
00001302  B602                     314                  CMP.B       D2,D3
00001304  6700 02DC                315                  BEQ         PARSE_OP_5
00001308                           316                  
00001308  163C 0006                317                  MOVE.B      #OPCODE_6,D3            * BCC
0000130C  B602                     318                  CMP.B       D2,D3
0000130E  6700 02D2                319                  BEQ         PARSE_OP_6                
00001312                           320  
00001312  163C 0007                321                  MOVE.B      #OPCODE_7,D3            * MOVEQ
00001316  B602                     322                  CMP.B       D2,D3
00001318  6700 02C8                323                  BEQ         PARSE_OP_7
0000131C                           324  
0000131C  163C 0008                325                  MOVE.B      #OPCODE_8,D3            * DIVS
00001320  B602                     326                  CMP.B       D2,D3
00001322  6700 02BE                327                  BEQ         PARSE_OP_8
00001326                           328                  
00001326  163C 0009                329                  MOVE.B      #OPCODE_9,D3            * SUB,SUBA
0000132A  B602                     330                  CMP.B       D2,D3
0000132C  6700 02B4                331                  BEQ         PARSE_OP_9
00001330                           332                  
00001330  163C 000B                333                  MOVE.B      #OPCODE_B,D3            * EOR,CMP,CMPA
00001334  B602                     334                  CMP.B       D2,D3
00001336  6700 0508                335                  BEQ         PARSE_OP_B                
0000133A                           336  
0000133A  163C 000C                337                  MOVE.B      #OPCODE_C,D3            * AND,MULS
0000133E  B602                     338                  CMP.B       D2,D3
00001340  6700 04FE                339                  BEQ         PARSE_OP_C
00001344                           340  
00001344  163C 000D                341                  MOVE.B      #OPCODE_D,D3            * ADD,ADDA
00001348  B602                     342                  CMP.B       D2,D3
0000134A  6700 04F4                343                  BEQ         PARSE_OP_D
0000134E                           344                  
0000134E  163C 000E                345                  MOVE.B      #OPCODE_E,D3            * ASL,ASR,LSL,LSR,ROL,ROR
00001352  B602                     346                  CMP.B       D2,D3
00001354  6700 04EA                347                  BEQ         PARSE_OP_E
00001358                           348                                  
00001358                           349                  
00001358                           350                  *CASE where nothing matched, bad data. report to user. Skip to next 16 bit code
00001358  43F9 00001BCE            351  NO_OP_MATCH     LEA         INVALID_OP_MSG,A1
0000135E  103C 000E                352                  MOVE.B      #14,D0
00001362  4E4F                     353                  TRAP        #15
00001364                           354                  
00001364  2202                     355                  MOVE.L      D2,D1
00001366  103C 000F                356                  MOVE.B      #15,D0
0000136A  143C 0002                357                  MOVE.B      #2,D2
0000136E  4E4F                     358                  TRAP        #15
00001370                           359                  
00001370  43F9 00001BE7            360                  LEA         CR_LF_MSG,A1
00001376  103C 000E                361                  MOVE.B      #14,D0
0000137A  4E4F                     362                  TRAP        #15
0000137C                           363                  
0000137C  6000 FF18                364                  BRA         OP_IDENT
00001380                           365   
00001380                           366  ****************************************************************************
00001380                           367  *--------------------------------------------------------------------------*
00001380                           368  ****************************************************************************
00001380                           369                 
00001380                           370  * USABLE REGISTERS FOR THIS SECTION:  D0-D6, A3-A6 (A0, A1, A7 usable if necessary, but refrain)
00001380                           371  * Before branching to HANDLE_OPERAND, put Register in D6, Mode in D5 and size in OP_SIZE.                
00001380                           372  
00001380                           373  ****************************************************************************
00001380                           374  *--------------------------------Parse Operations--------------------------*
00001380                           375  ****************************************************************************
00001380                           376  
00001380                           377  * ANDI,SUBI,EORI,CMPI,BCHG
00001380  3607                     378  PARSE_OP_0      MOVE.W      D7,D3                   * D6 stores replicate of 16 bits stored in D7
00001382  343C 01C0                379                  MOVE.W      #$01C0,D2               * First Case: BitMask to check if BCHG Dn,<EA>
00001386  C642                     380                  AND.W       D2,D3
00001388                           381                  
00001388  3C07                     382                  MOVE.W      D7,D6                   * EA for ANDI,SUBI,BCHG,EORI,CMPI
0000138A  3A3C 003F                383                  MOVE.W      #$003F,D5
0000138E  CC45                     384                  AND.W       D5,D6
00001390                           385                  
00001390  3A3C 0007                386                  MOVE.W      #%000111,D5
00001394  CA46                     387                  AND.W       D6,D5
00001396  E64E                     388                  LSR.W       #3,D6
00001398                           389                  
00001398  3806                     390                  MOVE.W      D6,D4                   * Temp memory for swap
0000139A  3C05                     391                  MOVE.W      D5,D6                   * D6 stores Register
0000139C  3A04                     392                  MOVE.W      D4,D5                   * D5 stores Mode
0000139E                           393                  
0000139E  EC4B                     394                  LSR.W       #6,D3                   * Shift the BitMask to compare if BCHG Dn,<EA>
000013A0  0C43 0005                395                  CMPI.W      #%0101,D3
000013A4  6700 0180                396                  BEQ         BCHG_DN
000013A8                           397                  
000013A8  3607                     398                  MOVE.W      D7,D3                   * Check for other cases
000013AA  383C 0F00                399                  MOVE.W      #$0F00,D4               * BitMask to check other cases
000013AE  C644                     400                  AND.W       D4,D3
000013B0  E04B                     401                  LSR.W       #8,D3                   * Shift the BitMask to compare
000013B2                           402                  
000013B2  0C43 0008                403  PARSE_OF_0_CMP  CMPI.W      #%1000,D3               * BCHG #<data>,<EA>
000013B6  6700 011E                404                  BEQ         PARSE_0_BCHG
000013BA                           405  
000013BA  0C43 0002                406                  CMPI.W      #%0010,D3               * ANDI #<data>,<EA>
000013BE  6700 001E                407                  BEQ         PARSE_0_ANDI
000013C2                           408                  
000013C2  0C43 0004                409                  CMPI.W      #%0100,D3               * SUBI #<data>,<EA>
000013C6  6700 0026                410                  BEQ         PARSE_0_SUBI
000013CA                           411                  
000013CA  0C43 000A                412                  CMPI.W      #%1010,D3               * EORI #<data>,<EA>
000013CE  6700 002E                413                  BEQ         PARSE_0_EORI
000013D2                           414                  
000013D2  0C43 000C                415                  CMPI.W      #%1100,D3               * CMPI #<data>,<EA>
000013D6  6700 0036                416                  BEQ         PARSE_0_CMPI
000013DA                           417                  
000013DA  6000 FF7C                418                  BRA         NO_OP_MATCH             * BRANCH if No Match
000013DE                           419                  
000013DE  43F9 00001C29            420  PARSE_0_ANDI    LEA         PRINT_ANDI,A1           * Print ANDI
000013E4  103C 000E                421                  MOVE.B      #14,D0
000013E8  4E4F                     422                  TRAP        #15
000013EA  6000 0032                423                  BRA         PARSE_0_SIZE
000013EE                           424  
000013EE  43F9 00001C2F            425  PARSE_0_SUBI    LEA         PRINT_SUBI,A1           * Print SUBI
000013F4  103C 000E                426                  MOVE.B      #14,D0
000013F8  4E4F                     427                  TRAP        #15
000013FA  6000 0022                428                  BRA         PARSE_0_SIZE
000013FE                           429  
000013FE  43F9 00001C35            430  PARSE_0_EORI    LEA         PRINT_EORI,A1           * Print EORI
00001404  103C 000E                431                  MOVE.B      #14,D0
00001408  4E4F                     432                  TRAP        #15
0000140A  6000 0012                433                  BRA         PARSE_0_SIZE
0000140E                           434  
0000140E  43F9 00001C3B            435  PARSE_0_CMPI    LEA         PRINT_CMPI,A1           * Print CMPI
00001414  103C 000E                436                  MOVE.B      #14,D0
00001418  4E4F                     437                  TRAP        #15
0000141A  6000 0002                438                  BRA         PARSE_0_SIZE
0000141E                           439                  
0000141E  3407                     440  PARSE_0_SIZE    MOVE.W      D7,D2                   * Need to check for size
00001420  323C 00C0                441                  MOVE.W      #$00C0,D1               * BitMask to check size
00001424  C441                     442                  AND.W       D1,D2
00001426  EC49                     443                  LSR.W       #6,D1                   * Shift the BitMask to compare
00001428                           444                  
00001428  0C01 0000                445                  CMPI.B      #%0000,D1               * Byte size
0000142C  6700 0012                446                  BEQ         PARSE_0_SIZE_B
00001430                           447                  
00001430  0C01 0001                448                  CMPI.B      #%0001,D1               * Word size
00001434  6700 0022                449                  BEQ         PARSE_0_SIZE_W
00001438                           450                  
00001438  0C01 0002                451                  CMPI.B      #%0010,D1               * Long size
0000143C  6700 0032                452                  BEQ         PARSE_0_SIZE_L
00001440                           453                  
00001440  13FC 0000 00001C66       454  PARSE_0_SIZE_B  MOVE.B      #$00,OP_SIZE            * Sets OP_SIZE to byte
00001448  43F9 00001C41            455                  LEA         PRINT_B,A1              * Print .B
0000144E  103C 000E                456                  MOVE.B      #14,D0
00001452  4E4F                     457                  TRAP        #15
00001454  6000 002E                458                  BRA         PARSE_0_IMMDATA 
00001458                           459                  
00001458  13FC 0001 00001C66       460  PARSE_0_SIZE_W  MOVE.B      #$01,OP_SIZE            * Sets OP_SIZE to word
00001460  43F9 00001C45            461                  LEA         PRINT_W,A1              * Print .W
00001466  103C 000E                462                  MOVE.B      #14,D0
0000146A  4E4F                     463                  TRAP        #15               
0000146C  6000 0016                464                  BRA         PARSE_0_IMMDATA 
00001470                           465                  
00001470  13FC 0002 00001C66       466  PARSE_0_SIZE_L  MOVE.B      #$02,OP_SIZE            * Sets OP_SIZE to long
00001478  43F9 00001C49            467                  LEA         PRINT_L,A1              * Print .L
0000147E  103C 000E                468                  MOVE.B      #14,D0
00001482  4E4F                     469                  TRAP        #15
00001484                           470                  
00001484  43F9 00001BEA            471  PARSE_0_IMMDATA LEA         TAB_MSG,A1            
0000148A  103C 000E                472                  MOVE.B      #14,D0
0000148E  4E4F                     473                  TRAP        #15
00001490                           474                  
00001490  3A3C 0007                475                  MOVE.W      #$0007,D5               * Set immediate data mode
00001494  3C3C 0004                476                  MOVE.W      #$0004,D6               * Set immediate data register
00001498                           477  
00001498  4EB9 00001840            478                  JSR         HANDLE_OPERAND          * Enter Subroutine to print out immediate data
0000149E                           479                  
0000149E  43F9 00001B72            480  PARSE_0_EA      LEA         PRINT_COMMA,A1          * Print comma
000014A4  103C 000E                481                  MOVE.B      #14,D0
000014A8  4E4F                     482                  TRAP        #15   
000014AA                           483  
000014AA  3C07                     484                  MOVE.W      D7,D6                   * EA for ANDI,SUBI,BCHG,EORI,CMPI
000014AC  3A3C 003F                485                  MOVE.W      #$003F,D5
000014B0  CC45                     486                  AND.W       D5,D6
000014B2                           487                  
000014B2  3A3C 0007                488                  MOVE.W      #%000111,D5
000014B6  CA46                     489                  AND.W       D6,D5
000014B8  E64E                     490                  LSR.W       #3,D6
000014BA                           491                  
000014BA  3806                     492                  MOVE.W      D6,D4                   * Temp memory for swap
000014BC  3C05                     493                  MOVE.W      D5,D6                   * D6 stores Register
000014BE  3A04                     494                  MOVE.W      D4,D5                   * D5 stores Mode
000014C0                           495                  
000014C0  4EB9 00001840            496                  JSR         HANDLE_OPERAND          * Enter subroutine for source handling
000014C6                           497                  
000014C6  43F9 00001BE7            498                  LEA         CR_LF_MSG,A1            * Print New Line
000014CC  103C 000E                499                  MOVE.B      #14,D0
000014D0  4E4F                     500                  TRAP        #15
000014D2                           501  
000014D2  6000 FDC2                502                  BRA         OP_IDENT
000014D6                           503  * Parse_0 for BCHG.x #<data>,<ea>                
000014D6  3407                     504  PARSE_0_BCHG    MOVE.W      D7,D2                   * Need to check if the rest of the op code ends in 01
000014D8  323C 00C0                505                  MOVE.W      #$00C0,D1               * BitMask to check 
000014DC  C441                     506                  AND.W       D1,D2
000014DE  EC49                     507                  LSR.W       #6,D1                   * Shift the BitMask to compare
000014E0                           508                  
000014E0  0C01 0001                509                  CMPI.B      #%0001,D1               * Is the rest of the op code 01?
000014E4  6600 FE72                510                  BNE         NO_OP_MATCH             * If not equal: ERROR
000014E8                           511                  
000014E8  0C05 0000                512                  CMPI.B      #DR_DIRECT,D5           * Check if EA is Dn
000014EC  6700 0012                513                  BEQ         PARSE_0_BCHG_L          * If so, BCHG is long
000014F0                           514                  
000014F0  43F9 00001C19            515                  LEA         PRINT_BCHG_B,A1         * Print BCHG.B
000014F6  103C 000E                516                  MOVE.B      #14,D0
000014FA  4E4F                     517                  TRAP        #15
000014FC  6000 000E                518                  BRA         PARSE_BCHG_DATA
00001500                           519  
00001500  43F9 00001C21            520  PARSE_0_BCHG_L  LEA         PRINT_BCHG_L,A1         * Print BCHG.L
00001506  103C 000E                521                  MOVE.B      #14,D0
0000150A  4E4F                     522                  TRAP        #15
0000150C                           523                  
0000150C                           524  PARSE_BCHG_DATA
0000150C                           525  
0000150C  3A3C 0007                526                  MOVE.W      #$0007,D5               * Set immediate data mode
00001510  3C3C 0004                527                  MOVE.W      #$0004,D6               * Set immediate data register
00001514  13FC 0001 00001C66       528                  MOVE.B      #$01,OP_SIZE            * Special case: BCHG immediate data should always be WORD size
0000151C  4EB9 00001840            529                  JSR         HANDLE_OPERAND          * Enter Subroutine to print out immediate data
00001522                           530                  
00001522  6000 FF7A                531                  BRA         PARSE_0_EA
00001526                           532  * Parse_0 for BCHG.x Dn,<ea> case:         
00001526  0C05 0000                533  BCHG_DN         CMPI.B      #DR_DIRECT,D5           * Check if EA is Dn
0000152A  6700 0012                534                  BEQ         BCHG_PRINT_L            * If so, BCHG is long
0000152E                           535                  
0000152E  43F9 00001C19            536  BCHG_PRINT_B    LEA         PRINT_BCHG_B,A1         * Print BCHG.B
00001534  103C 000E                537                  MOVE.B      #14,D0
00001538  4E4F                     538                  TRAP        #15
0000153A  6000 000E                539                  BRA         BCHG_PRINT_D        
0000153E                           540                  
0000153E  43F9 00001C21            541  BCHG_PRINT_L    LEA         PRINT_BCHG_L,A1         * Print BCHG.L
00001544  103C 000E                542                  MOVE.B      #14,D0
00001548  4E4F                     543                  TRAP        #15
0000154A                           544  
0000154A  43F9 00001BEA            545  BCHG_PRINT_D    LEA         TAB_MSG,A1              * Print tab
00001550  103C 000E                546                  MOVE.B      #14,D0
00001554  4E4F                     547                  TRAP        #15
00001556                           548                  
00001556  43F9 00001B70            549                  LEA         PRINT_D,A1
0000155C  103C 000E                550                  MOVE.B      #14,D0
00001560  4E4F                     551                  TRAP        #15
00001562                           552                  
00001562  2207                     553                  MOVE.L      D7,D1                   * Move target register to D1
00001564  283C 00000E00            554                  MOVE.L      #$0E00,D4
0000156A  C284                     555                  AND.L       D4,D1
0000156C                           556                  
0000156C  E089                     557                  LSR.L       #8,D1                   * Shift 9 to get target register
0000156E  E289                     558                  LSR.L       #1,D1
00001570                           559                  
00001570                           560                  ************************************************************************ FIX
00001570  103C 000F                561                  MOVE.B      #15,D0                  * Print target register
00001574  143C 000A                562                  MOVE.B      #10,D2
00001578  4E4F                     563                  TRAP        #15
0000157A                           564  
0000157A  6000 FF22                565                  BRA         PARSE_0_EA              * Branch to print parse 0 EA
0000157E                           566  
0000157E                           567  
0000157E                           568  
0000157E                           569  * MOVE.B
0000157E  43F9 00001BEC            570  PARSE_OP_1      LEA         PRINT_MOVE_B,A1
00001584  103C 000E                571                  MOVE.B      #14,D0
00001588  4E4F                     572                  TRAP        #15
0000158A                           573                  
0000158A  13FC 0000 00001C66       574                  MOVE.B      #$00,OP_SIZE            * Sets OP_SIZE to byte.
00001592                           575                  
00001592  3C07                     576                  MOVE.W      D7,D6                   * D6 stores replicate of 16 bits stored in D7
00001594  3A3C 003F                577                  MOVE.W      #$003F,D5
00001598  CC45                     578                  AND.W       D5,D6                   * D6 stores Source information
0000159A                           579                  
0000159A  3A3C 0007                580                  MOVE.W      #%000111,D5             * BitMask for Source register
0000159E  CA46                     581                  AND.W       D6,D5                   * D5 stores Source Register
000015A0  E64E                     582                  LSR.W       #3,D6                   * D6 stores Source Mode
000015A2                           583                  
000015A2  3806                     584                  MOVE.W      D6,D4                   * Temp memory for swap
000015A4  3C05                     585                  MOVE.W      D5,D6                   * D6 stores Source Register
000015A6  3A04                     586                  MOVE.W      D4,D5                   * D5 stores Source Mode
000015A8                           587                  
000015A8  4EB9 00001840            588                  JSR         HANDLE_OPERAND          * Enter Subroutine for Source Handling
000015AE                           589                  
000015AE  43F9 00001B72            590                  LEA         PRINT_COMMA,A1          * Print comma
000015B4  103C 000E                591                  MOVE.B      #14,D0
000015B8  4E4F                     592                  TRAP        #15         
000015BA                           593                  
000015BA                           594                 
000015BA  3C07                     595                  MOVE.W      D7,D6                   * D6 stores replicate of 16 bits stored in D7
000015BC  3A3C 0FC0                596                  MOVE.W      #$0FC0,D5
000015C0  CC45                     597                  AND.W       D5,D6                   * D6 stores only Destination information, not shifted.
000015C2  EC4E                     598                  LSR.W       #6,D6                   * D6 stores Destination info
000015C4                           599                  
000015C4  3A3C 0007                600                  MOVE.W      #%000111,D5             * BitMask for only mode
000015C8  CA46                     601                  AND.W       D6,D5                   * D5 stores Destination Mode
000015CA                           602                  
000015CA  E64E                     603                  LSR.W       #3,D6                   * D6 stores Destination Register
000015CC                           604                  
000015CC  4EB9 00001840            605                  JSR         HANDLE_OPERAND
000015D2                           606                  
000015D2  43F9 00001BE7            607                  LEA         CR_LF_MSG,A1            * Print New Line
000015D8  103C 000E                608                  MOVE.B      #14,D0
000015DC  4E4F                     609                  TRAP        #15
000015DE                           610                  
000015DE  6000 FCB6                611                  BRA         OP_IDENT
000015E2                           612  
000015E2                           613  
000015E2                           614  * MOVE.L
000015E2                           615  PARSE_OP_2      
000015E2                           616  
000015E2                           617  * MOVE.W
000015E2                           618  PARSE_OP_3
000015E2                           619  
000015E2                           620  * CLR,RTS,JSR,MOVEM,LEA
000015E2                           621  PARSE_OP_4
000015E2                           622  
000015E2                           623  * ADDQ
000015E2                           624  PARSE_OP_5
000015E2                           625  
000015E2                           626  * BCC
000015E2                           627  PARSE_OP_6
000015E2                           628  
000015E2                           629  * MOVEQ
000015E2                           630  PARSE_OP_7
000015E2                           631  
000015E2                           632  * DIVS
000015E2                           633  PARSE_OP_8
000015E2                           634  
000015E2                           635  * SUB,SUBA
000015E2  343C 01C0                636  PARSE_OP_9      MOVE.W      #$01C0,D2       * Bitmask for retrieving Opmode.
000015E6  C447                     637                  AND.W       D7,D2           * D2 stores the opmode, unshifted
000015E8  EC4A                     638                  LSR.W       #6,D2           * D2 stores the opmode
000015EA                           639                  
000015EA  0C02 0003                640                  CMPI.B      #$03,D2
000015EE  6700 001E                641                  BEQ         SUB_A_WORD      
000015F2                           642                  
000015F2  0C02 0007                643                  CMPI.B      #$07,D2
000015F6  6700 007C                644                  BEQ         SUB_A_LONG
000015FA                           645                  
000015FA  0C02 0002                646                  CMPI.B      #$02,D2
000015FE  6F00 00DA                647                  BLE         SUB_EA_DN
00001602                           648                  
00001602  0C02 0006                649                  CMPI.B      #06,D2
00001606  6F00 0182                650                  BLE         SUB_DN_EA
0000160A                           651                  
0000160A  6000 0230                652                  BRA         EXIT_PARSE_OP_9
0000160E                           653                  
0000160E  43F9 00001BF4            654  SUB_A_WORD      LEA         PRINT_SUB_A_W,A1    * Print: SUBA.W
00001614  103C 000E                655                  MOVE.B      #14,D0
00001618  4E4F                     656                  TRAP        #15
0000161A                           657  
0000161A  3C3C 0007                658                  MOVE.W      #$0007,D6
0000161E  CC47                     659                  AND.W       D7,D6           * D6 stores the EA register
00001620                           660                  
00001620  3A3C 0038                661                  MOVE.W      #$0038,D5
00001624  CA47                     662                  AND.W       D7,D5           * D5 stores the EA Mode, unshifted
00001626  E64D                     663                  LSR.W       #3,D5           * D5 stores the EA Mode
00001628                           664                  
00001628  13FC 0001 00001C66       665                  MOVE.B      #$01,OP_SIZE    * Set OP_SIZE to Word (%01)
00001630                           666                  
00001630  4EB9 00001840            667                  JSR         HANDLE_OPERAND
00001636                           668                  
00001636  43F9 00001B72            669                  LEA         PRINT_COMMA,A1  * Print comma
0000163C  103C 000E                670                  MOVE.B      #14,D0
00001640  4E4F                     671                  TRAP        #15
00001642                           672                  
00001642  43F9 00001B74            673                  LEA         PRINT_A,A1      * Print:  A
00001648  103C 000E                674                  MOVE.B      #14,D0
0000164C  4E4F                     675                  TRAP        #15
0000164E                           676                  
0000164E  4281                     677                  CLR.L       D1              * Clear D1
00001650  323C 0E00                678                  MOVE.W      #$0E00,D1
00001654  C247                     679                  AND.W       D7,D1           * D1 stores the destination address register, unshifted
00001656  E049                     680                  LSR.W       #8,D1
00001658  E249                     681                  LSR.W       #1,D1           * D1 stores the destination address register, shifted
0000165A                           682                  
0000165A  103C 000F                683                  MOVE.B      #15,D0          * Print the destination address register
0000165E  143C 000A                684                  MOVE.B      #10,D2
00001662  4E4F                     685                  TRAP        #15
00001664                           686                  
00001664  43F9 00001BE7            687                  LEA         CR_LF_MSG,A1    * Print new line, carriage return
0000166A  103C 000E                688                  MOVE.B      #14,D0
0000166E  4E4F                     689                  TRAP        #15             
00001670                           690                  
00001670  6000 01CA                691                  BRA         EXIT_PARSE_OP_9
00001674                           692  
00001674  43F9 00001BFC            693  SUB_A_LONG      LEA         PRINT_SUB_A_L,A1      * Print: SUBA.L
0000167A  103C 000E                694                  MOVE.B      #14,D0
0000167E  4E4F                     695                  TRAP        #15
00001680                           696  
00001680  3C3C 0007                697                  MOVE.W      #$0007,D6
00001684  CC47                     698                  AND.W       D7,D6           * D6 stores the EA register
00001686                           699                  
00001686  3A3C 0038                700                  MOVE.W      #$0038,D5
0000168A  CA47                     701                  AND.W       D7,D5           * D5 stores the EA Mode, unshifted
0000168C  E64D                     702                  LSR.W       #3,D5           * D5 stores the EA Mode
0000168E                           703                  
0000168E  13FC 0002 00001C66       704                  MOVE.B      #$02,OP_SIZE    * Set OP_SIZE to Long (%10)
00001696                           705                  
00001696  4EB9 00001840            706                  JSR         HANDLE_OPERAND
0000169C                           707                  
0000169C  43F9 00001B72            708                  LEA         PRINT_COMMA,A1  * Print comma
000016A2  103C 000E                709                  MOVE.B      #14,D0
000016A6  4E4F                     710                  TRAP        #15
000016A8                           711                  
000016A8  43F9 00001B74            712                  LEA         PRINT_A,A1      * Print:  A
000016AE  103C 000E                713                  MOVE.B      #14,D0
000016B2  4E4F                     714                  TRAP        #15
000016B4                           715                  
000016B4  4281                     716                  CLR.L       D1              * Clear D1
000016B6  323C 0E00                717                  MOVE.W      #$0E00,D1       * Bitmask for destination address register
000016BA  C247                     718                  AND.W       D7,D1           * D1 stores the destination address register, unshifted
000016BC  E049                     719                  LSR.W       #8,D1
000016BE  E249                     720                  LSR.W       #1,D1           * D1 stores the destination address register, shifted
000016C0                           721                  
000016C0  103C 000F                722                  MOVE.B      #15,D0          * Print the destination address register
000016C4  143C 000A                723                  MOVE.B      #10,D2
000016C8  4E4F                     724                  TRAP        #15
000016CA                           725                  
000016CA  43F9 00001BE7            726                  LEA         CR_LF_MSG,A1    * Print new line, carriage return
000016D0  103C 000E                727                  MOVE.B      #14,D0
000016D4  4E4F                     728                  TRAP        #15   
000016D6                           729                  
000016D6  6000 0164                730                  BRA         EXIT_PARSE_OP_9
000016DA                           731  
000016DA  0C02 0000                732  SUB_EA_DN       CMPI.B      #$00,D2
000016DE  6700 0012                733                  BEQ         SUB_EA_DN_BYTE
000016E2                           734                  
000016E2  0C02 0001                735                  CMPI.B      #$01,D2
000016E6  6700 0022                736                  BEQ         SUB_EA_DN_WORD
000016EA                           737                  
000016EA  0C02 0002                738                  CMPI.B      #$02,D2
000016EE  6700 0032                739                  BEQ         SUB_EA_DN_LONG
000016F2                           740                  
000016F2  43F9 00001C04            741  SUB_EA_DN_BYTE  LEA         PRINT_SUB_B,A1      * Print:  SUB.B
000016F8  103C 000E                742                  MOVE.B      #14,D0
000016FC  4E4F                     743                  TRAP        #15
000016FE  13FC 0000 00001C66       744                  MOVE.B      #$00,OP_SIZE        * Set OP_SIZE to byte
00001706  6000 0032                745                  BRA         RET_SUB_EA_DN       * Merge
0000170A                           746                  
0000170A  43F9 00001C0B            747  SUB_EA_DN_WORD  LEA         PRINT_SUB_W,A1      * Print:  SUB.W
00001710  103C 000E                748                  MOVE.B      #14,D0
00001714  4E4F                     749                  TRAP        #15
00001716  13FC 0001 00001C66       750                  MOVE.B      #$01,OP_SIZE        * Set OP_SIZE to word
0000171E  6000 001A                751                  BRA         RET_SUB_EA_DN       * Merge
00001722                           752                  
00001722  43F9 00001C12            753  SUB_EA_DN_LONG  LEA         PRINT_SUB_L,A1
00001728  103C 000E                754                  MOVE.B      #14,D0
0000172C  4E4F                     755                  TRAP        #15
0000172E  13FC 0002 00001C66       756                  MOVE.B      #$02,OP_SIZE        * Set OP_SIZE to long
00001736  6000 0002                757                  BRA         RET_SUB_EA_DN       * Merge
0000173A                           758                  
0000173A                           759                  
0000173A  3C3C 0007                760  RET_SUB_EA_DN   MOVE.W      #$0007,D6           * Bitmask for EA Register
0000173E  CC47                     761                  AND.W       D7,D6               * D6 stores EA Register
00001740                           762                  
00001740  3A3C 0038                763                  MOVE.W      #$0038,D5
00001744  CA47                     764                  AND.W       D7,D5               * D5 stores EA Mode, unshifted
00001746  E64D                     765                  LSR.W       #3,D5               * D5 stores EA Mode
00001748                           766                  
00001748  4EB9 00001840            767                  JSR         HANDLE_OPERAND
0000174E                           768                  
0000174E  43F9 00001B72            769                  LEA         PRINT_COMMA,A1      * Print comma
00001754  103C 000E                770                  MOVE.B      #14,D0
00001758  4E4F                     771                  TRAP        #15
0000175A                           772                  
0000175A  43F9 00001B70            773                  LEA         PRINT_D,A1          * Print:  D
00001760  103C 000E                774                  MOVE.B      #14,D0
00001764  4E4F                     775                  TRAP        #15
00001766                           776                  
00001766  323C 0E00                777                  MOVE.W      #$0E00,D1
0000176A  C247                     778                  AND.W       D7,D1               * D1 stores the destination register, unshifted
0000176C  E049                     779                  LSR.W       #8,D1
0000176E  E249                     780                  LSR.W       #1,D1               * D1 stored the destination register
00001770                           781                  
00001770  103C 000F                782                  MOVE.B      #15,D0
00001774  143C 000A                783                  MOVE.B      #10,D2
00001778  4E4F                     784                  TRAP        #15                 * Print destination register
0000177A                           785                  
0000177A  43F9 00001BE7            786                  LEA         CR_LF_MSG,A1        * Print new line/carriage return
00001780  103C 000E                787                  MOVE.B      #14,D0
00001784  4E4F                     788                  TRAP        #15                
00001786                           789                  
00001786  6000 00B4                790                  BRA         EXIT_PARSE_OP_9
0000178A                           791  
0000178A  0C02 0004                792  SUB_DN_EA       CMPI.B      #$04,D2
0000178E  6700 0012                793                  BEQ         SUB_DN_EA_BYTE
00001792                           794                  
00001792  0C02 0005                795                  CMPI.B      #$05,D2
00001796  6700 0022                796                  BEQ         SUB_DN_EA_WORD
0000179A                           797                  
0000179A  0C02 0006                798                  CMPI.B      #$06,D2
0000179E  6700 0032                799                  BEQ         SUB_DN_EA_LONG
000017A2                           800                  
000017A2  43F9 00001C04            801  SUB_DN_EA_BYTE  LEA         PRINT_SUB_B,A1      * Print:  SUB.B
000017A8  103C 000E                802                  MOVE.B      #14,D0
000017AC  4E4F                     803                  TRAP        #15
000017AE  13FC 0000 00001C66       804                  MOVE.B      #$00,OP_SIZE        * Set OP_SIZE to byte
000017B6  6000 0032                805                  BRA         RET_SUB_DN_EA       * Merge
000017BA                           806                  
000017BA  43F9 00001C0B            807  SUB_DN_EA_WORD  LEA         PRINT_SUB_W,A1      * Print:  SUB.W
000017C0  103C 000E                808                  MOVE.B      #14,D0
000017C4  4E4F                     809                  TRAP        #15
000017C6  13FC 0001 00001C66       810                  MOVE.B      #$01,OP_SIZE        * Set OP_SIZE to word
000017CE  6000 001A                811                  BRA         RET_SUB_DN_EA       * Merge
000017D2                           812                  
000017D2  43F9 00001C12            813  SUB_DN_EA_LONG  LEA         PRINT_SUB_L,A1
000017D8  103C 000E                814                  MOVE.B      #14,D0
000017DC  4E4F                     815                  TRAP        #15
000017DE  13FC 0002 00001C66       816                  MOVE.B      #$02,OP_SIZE        * Set OP_SIZE to long
000017E6  6000 0002                817                  BRA         RET_SUB_DN_EA       * Merge
000017EA                           818                  
000017EA                           819                  
000017EA  3C3C 0007                820  RET_SUB_DN_EA   MOVE.W      #$0007,D6           * Bitmask for EA Register
000017EE  CC47                     821                  AND.W       D7,D6               * D6 stores EA Register
000017F0                           822                  
000017F0  3A3C 0038                823                  MOVE.W      #$0038,D5
000017F4  CA47                     824                  AND.W       D7,D5               * D5 stores EA Mode, unshifted
000017F6  E64D                     825                  LSR.W       #3,D5               * D5 stores EA Mode
000017F8                           826                  
000017F8  43F9 00001B70            827                  LEA         PRINT_D,A1          * Print:  D
000017FE  103C 000E                828                  MOVE.B      #14,D0
00001802  4E4F                     829                  TRAP        #15
00001804                           830                  
00001804  4281                     831                  CLR.L       D1                  * Clear D1
00001806  323C 0E00                832                  MOVE.W      #$0E00,D1
0000180A  C247                     833                  AND.W       D7,D1               * D1 stores the data register, unshifted
0000180C  E049                     834                  LSR.W       #8,D1
0000180E  E249                     835                  LSR.W       #1,D1               * D1 stored the data register
00001810  103C 000F                836                  MOVE.B      #15,D0
00001814  143C 000A                837                  MOVE.B      #10,D2
00001818  4E4F                     838                  TRAP        #15                 * Print destination register
0000181A                           839                  
0000181A  43F9 00001B72            840                  LEA         PRINT_COMMA,A1      * Print comma
00001820  103C 000E                841                  MOVE.B      #14,D0
00001824  4E4F                     842                  TRAP        #15
00001826                           843                  
00001826  4EB9 00001840            844                  JSR         HANDLE_OPERAND      * Print EA
0000182C                           845                  
0000182C  43F9 00001BE7            846                  LEA         CR_LF_MSG,A1        * Print new line/carriage return
00001832  103C 000E                847                  MOVE.B      #14,D0
00001836  4E4F                     848                  TRAP        #15             
00001838  6000 0002                849                  BRA         EXIT_PARSE_OP_9
0000183C                           850                  
0000183C                           851                  
0000183C  6000 FA58                852  EXIT_PARSE_OP_9 BRA         OP_IDENT
00001840                           853  
00001840                           854  * EOR,CMP,CMPA
00001840                           855  PARSE_OP_B
00001840                           856  
00001840                           857  * AND,MULS
00001840                           858  PARSE_OP_C
00001840                           859  
00001840                           860  * ADD,ADDA
00001840                           861  PARSE_OP_D
00001840                           862  
00001840                           863  * ASL,ASR,LSL,LSR,ROL,ROR
00001840                           864  PARSE_OP_E
00001840                           865  
00001840                           866  *********************************************************************************
00001840                           867  *---------------------------Operand Subroutine----------------------------------*
00001840                           868  *********************************************************************************
00001840                           869  * D6 holds register.  
00001840                           870  * D5 holds mode.  
00001840                           871  * OP_SIZE holds size of operation: $00 = Byte, $01 = Word, $02 = Long
00001840  48E7 0100                872  HANDLE_OPERAND          MOVEM.L     D7,-(SP)
00001844                           873                          
00001844  103C 0000                874                          MOVE.B      #DR_DIRECT,D0
00001848  BA00                     875                          CMP.B       D0,D5
0000184A  6700 005E                876                          BEQ         OPERAND_MODE_0             * Branch to Data Register Direct: Dn
0000184E                           877                          
0000184E  103C 0001                878                          MOVE.B      #AR_DIRECT,D0
00001852  BA00                     879                          CMP.B       D0,D5
00001854  6700 006E                880                          BEQ         OPERAND_MODE_1             * Branch to Address Register Direct: An
00001858                           881                          
00001858  103C 0002                882                          MOVE.B      #AR_INDIRECT,D0
0000185C  BA00                     883                          CMP.B       D0,D5
0000185E  6700 007E                884                          BEQ         OPERAND_MODE_2             * Branch to Address Register Indirect: (An)
00001862                           885                          
00001862  103C 0003                886                          MOVE.B      #AR_INDIRECT_POST,D0
00001866  BA00                     887                          CMP.B       D0,D5
00001868  6700 009A                888                          BEQ         OPERAND_MODE_3             * Branch to Address Register Indirect w/Post-Incrementing: (An)+
0000186C                           889                          
0000186C  103C 0004                890                          MOVE.B      #AR_INDIRECT_PRE,D0
00001870  BA00                     891                          CMP.B       D0,D5
00001872  6700 00B8                892                          BEQ         OPERAND_MODE_4             * Branch to Address Register Indirect w/Pre-Decrimenting: -(An)
00001876                           893                          
00001876  103C 0007                894                          MOVE.B      #ABS_ADDR,D0
0000187A  BA00                     895                          CMP.B       D0,D5
0000187C  6700 00D6                896                          BEQ         OPERAND_MODE_7             * Branch to Absolute Addressing: 3 cases (xxx).W (xxx).L #<data>
00001880                           897  
00001880                           898  * Invalid Destination Mode Handling                        
00001880  43F9 00001B13            899  INVALID_OPERAND_MODE    LEA         INVALID_OPERAND_MODE_MSG,A1        
00001886  103C 000E                900                          MOVE.B      #14,D0
0000188A  4E4F                     901                          TRAP        #15                        * Print error message for Destination Mode
0000188C                           902                          
0000188C  2205                     903                          MOVE.L      D5,D1
0000188E  103C 000F                904                          MOVE.B      #15,D0
00001892  143C 0002                905                          MOVE.B      #2,D2
00001896  4E4F                     906                          TRAP        #15                        * Print the problematic Destination mode
00001898                           907                          
00001898  43F9 00001BE7            908                          LEA         CR_LF_MSG,A1
0000189E  103C 000E                909                          MOVE.B      #14,D0
000018A2  4E4F                     910                          TRAP        #15                        * Print carriage return/new line
000018A4                           911                          
000018A4                           912                          
000018A4  4CDF 0080                913  EXIT_HANDLE_OPERAND     MOVEM.L     (SP)+,D7                   * Exit HANDLE_DESTINATION subroutine
000018A8  4E75                     914                          RTS
000018AA                           915  
000018AA                           916  * Complex part of destination handling
000018AA                           917  
000018AA                           918  * Data Register Direct                        
000018AA  43F9 00001B70            919  OPERAND_MODE_0          LEA         PRINT_D,A1                 * Print D
000018B0  103C 000E                920                          MOVE.B      #14,D0
000018B4  4E4F                     921                          TRAP        #15
000018B6                           922                          
000018B6  2206                     923                          MOVE.L      D6,D1                      * Print target Register
000018B8  103C 000F                924                          MOVE.B      #15,D0
000018BC  143C 000A                925                          MOVE.B      #10,D2
000018C0  4E4F                     926                          TRAP        #15
000018C2                           927                          
000018C2                           928  * Code goes here
000018C2  60E0                     929                          BRA         EXIT_HANDLE_OPERAND
000018C4                           930  
000018C4                           931  * Address Register Direct
000018C4  43F9 00001B74            932  OPERAND_MODE_1          LEA         PRINT_A,A1                  * Prints: A
000018CA  103C 000E                933                          MOVE.B      #14,D0
000018CE  4E4F                     934                          TRAP        #15
000018D0                           935                          
000018D0  2206                     936                          MOVE.L      D6,D1                       * Prints Register in Decimal
000018D2  103C 000F                937                          MOVE.B      #15,D0
000018D6  143C 000A                938                          MOVE.B      #10,D2
000018DA  4E4F                     939                          TRAP        #15
000018DC                           940     
000018DC  60C6                     941                          BRA         EXIT_HANDLE_OPERAND 
000018DE                           942  
000018DE                           943  * Address Register Indirect
000018DE  43F9 00001B76            944  OPERAND_MODE_2          LEA         PRINT_A_INDIRECT,A1         * Prints: (A
000018E4  103C 000E                945                          MOVE.B      #14,D0
000018E8  4E4F                     946                          TRAP        #15
000018EA                           947                          
000018EA  2206                     948                          MOVE.L      D6,D1                       * Prints Register in Decimal
000018EC  103C 000F                949                          MOVE.B      #15,D0
000018F0  143C 000A                950                          MOVE.B      #10,D2
000018F4  4E4F                     951                          TRAP        #15
000018F6                           952                          
000018F6  43F9 00001B79            953                          LEA         PRINT_END_PAREN,A1          * Prints: )
000018FC  103C 000E                954                          MOVE.B      #14,D0
00001900  4E4F                     955                          TRAP        #15       
00001902                           956  
00001902  60A0                     957                          BRA         EXIT_HANDLE_OPERAND
00001904                           958  
00001904                           959  * Address Register Indirect w/Post-Incrementation
00001904  43F9 00001B76            960  OPERAND_MODE_3          LEA         PRINT_A_INDIRECT,A1         * Prints: (A
0000190A  103C 000E                961                          MOVE.B      #14,D0
0000190E  4E4F                     962                          TRAP        #15
00001910                           963  
00001910  2206                     964                          MOVE.L      D6,D1                       * Prints Register in Decimal
00001912  103C 000F                965                          MOVE.B      #15,D0
00001916  143C 000A                966                          MOVE.B      #10,D2
0000191A  4E4F                     967                          TRAP        #15
0000191C                           968                          
0000191C  43F9 00001B7B            969                          LEA         PRINT_END_PAREN_PLUS,A1     * Prints: )+
00001922  103C 000E                970                          MOVE.B      #14,D0
00001926  4E4F                     971                          TRAP        #15                           
00001928                           972  
00001928  6000 FF7A                973                          BRA         EXIT_HANDLE_OPERAND
0000192C                           974                          
0000192C                           975  * Address Register Indirect w/Pre-Decrementation
0000192C  43F9 00001B7E            976  OPERAND_MODE_4          LEA         PRINT_MINUS_A_INDIRECT,A1   * Prints: -(A
00001932  103C 000E                977                          MOVE.B      #14,D0
00001936  4E4F                     978                          TRAP        #15
00001938                           979                          
00001938  2206                     980                          MOVE.L      D6,D1                       * Prints Register in Decimal
0000193A  103C 000F                981                          MOVE.B      #15,D0
0000193E  143C 000A                982                          MOVE.B      #10,D2
00001942  4E4F                     983                          TRAP        #15
00001944                           984                          
00001944  43F9 00001B79            985                          LEA         PRINT_END_PAREN,A1          * Prints: )
0000194A  103C 000E                986                          MOVE.B      #14,D0
0000194E  4E4F                     987                          TRAP        #15
00001950                           988  
00001950  6000 FF52                989                          BRA         EXIT_HANDLE_OPERAND
00001954                           990                          
00001954                           991  * Absolute Addressing
00001954  103C 0000                992  OPERAND_MODE_7          MOVE.B      #ABS_ADDR_WORD_REG,D0       * Load %000 to D0
00001958  BC00                     993                          CMP.B       D0,D6
0000195A  6700 003E                994                          BEQ         HANDLE_ABS_ADDR_WORD
0000195E                           995                          
0000195E  103C 0001                996                          MOVE.B      #ABS_ADDR_LONG_REG,D0       * Load %001 to D0
00001962  BC00                     997                          CMP.B       D0,D6
00001964  6700 0054                998                          BEQ         HANDLE_ABS_ADDR_LONG
00001968                           999                          
00001968  103C 0004               1000                          MOVE.B      #IMMEDIATE_DATA,D0          * Load %100 to D0
0000196C  BC00                    1001                          CMP.B       D0,D6
0000196E  6700 0072               1002                          BEQ         HANDLE_IMMED_DATA
00001972                          1003  
00001972                          1004  * The address register stored in D6 is invalid.                        
00001972  43F9 00001B3B           1005  INVALID_ABS_ADDR_REG    LEA         INVALID_ABS_ADDR_REG_MSG,A1 * Print error message
00001978  103C 000E               1006                          MOVE.B      #14,D0
0000197C  4E4F                    1007                          TRAP        #15
0000197E                          1008                          
0000197E  2206                    1009                          MOVE.L      D6,D1                       * Print invalid address register stored in D6
00001980  103C 000F               1010                          MOVE.B      #15,D0
00001984  143C 0002               1011                          MOVE.B      #2,D2
00001988  4E4F                    1012                          TRAP        #15 
0000198A                          1013                          
0000198A  43F9 00001BE7           1014                          LEA         CR_LF_MSG,A1                * Print new Line
00001990  103C 000E               1015                          MOVE.B      #14,D0
00001994  4E4F                    1016                          TRAP        #15  
00001996                          1017                                                  
00001996                          1018  
00001996  6000 FF0C               1019  EXIT_OPERAND_MODE_7     BRA         EXIT_HANDLE_OPERAND 
0000199A                          1020  
0000199A                          1021  
0000199A  43F9 00001B81           1022  HANDLE_ABS_ADDR_WORD    LEA         PRINT_DOLLAR,A1
000019A0  103C 000E               1023                          MOVE.B      #14,D0
000019A4  4E4F                    1024                          TRAP        #15
000019A6                          1025                          
000019A6  181A                    1026                          MOVE.B      (A2)+,D4            * D4 stores a byte of the absolute address.
000019A8  E14C                    1027                          LSL.W       #8,D4               * Shift D4 left 8 bits
000019AA  181A                    1028                          MOVE.B      (A2)+,D4            * D4 stores word absolute address
000019AC                          1029                          
000019AC  2204                    1030                          MOVE.L      D4,D1               * Print absolute address
000019AE  103C 000F               1031                          MOVE.B      #15,D0
000019B2  143C 0010               1032                          MOVE.B      #16,D2
000019B6  4E4F                    1033                          TRAP        #15
000019B8                          1034                          
000019B8  60DC                    1035                          BRA         EXIT_OPERAND_MODE_7
000019BA                          1036  
000019BA  43F9 00001B81           1037  HANDLE_ABS_ADDR_LONG    LEA         PRINT_DOLLAR,A1
000019C0  103C 000E               1038                          MOVE.B      #14,D0
000019C4  4E4F                    1039                          TRAP        #15
000019C6                          1040                          
000019C6  181A                    1041                          MOVE.B      (A2)+,D4            * D4 stores a byte of the absolute address.
000019C8  E18C                    1042                          LSL.L       #8,D4               * Shift D4 left 8 bits
000019CA  181A                    1043                          MOVE.B      (A2)+,D4
000019CC  E18C                    1044                          LSL.L       #8,D4
000019CE  181A                    1045                          MOVE.B      (A2)+,D4            * D4 stores a byte of the absolute address.
000019D0  E18C                    1046                          LSL.L       #8,D4               * Shift D4 left 8 bits
000019D2  181A                    1047                          MOVE.B      (A2)+,D4            * D4 stores long absolute address
000019D4                          1048  
000019D4  2204                    1049                          MOVE.L      D4,D1               * Print absolute address
000019D6  103C 000F               1050                          MOVE.B      #15,D0
000019DA  143C 0010               1051                          MOVE.B      #16,D2
000019DE  4E4F                    1052                          TRAP        #15
000019E0                          1053  
000019E0  60B4                    1054                          BRA         EXIT_OPERAND_MODE_7
000019E2                          1055                          
000019E2  43F9 00001B83           1056  HANDLE_IMMED_DATA       LEA         PRINT_NUM_DOLLAR,A1
000019E8  103C 000E               1057                          MOVE.B      #14,D0
000019EC  4E4F                    1058                          TRAP        #15
000019EE                          1059                          
000019EE  4281                    1060                          CLR.L       D1                  * Clears D1
000019F0  1239 00001C66           1061                          MOVE.B      OP_SIZE,D1          * Set D1 to OP_SIZE ($00 = Byte, $01 = Word, $02 = Long)
000019F6                          1062                          
000019F6  0C01 0000               1063                          CMPI.B      #$00,D1
000019FA  6700 0014               1064                          BEQ         IMMED_DATA_BYTE
000019FE                          1065                          
000019FE  0C01 0001               1066                          CMPI.B      #$01,D1
00001A02  6700 001A               1067                          BEQ         IMMED_DATA_WORD
00001A06                          1068                          
00001A06  0C01 0002               1069                          CMPI.B      #$02,D1
00001A0A  6700 0024               1070                          BEQ         IMMED_DATA_LONG
00001A0E                          1071                          
00001A0E                          1072                          
00001A0E  6086                    1073  EXIT_HANDLE_IMMED_DATA  BRA         EXIT_OPERAND_MODE_7
00001A10                          1074  
00001A10  121A                    1075  IMMED_DATA_BYTE         MOVE.B      (A2)+,D1            * Print byte of immediate data and move A2
00001A12  103C 000F               1076                          MOVE.B      #15,D0
00001A16  143C 0010               1077                          MOVE.B      #16,D2
00001A1A  4E4F                    1078                          TRAP        #15
00001A1C                          1079                          
00001A1C  60F0                    1080                          BRA         EXIT_HANDLE_IMMED_DATA
00001A1E                          1081  
00001A1E  121A                    1082  IMMED_DATA_WORD         MOVE.B      (A2)+,D1            * D1 stores a byte of the immediate data
00001A20  E149                    1083                          LSL.W       #8,D1               * Shift D1 left 8 bits
00001A22  121A                    1084                          MOVE.B      (A2)+,D1            * D1 stores immediate data word
00001A24                          1085                          
00001A24  103C 000F               1086                          MOVE.B      #15,D0              * Print immediate data word
00001A28  143C 0010               1087                          MOVE.B      #16,D2
00001A2C  4E4F                    1088                          TRAP        #15
00001A2E                          1089                          
00001A2E  60DE                    1090                          BRA         EXIT_HANDLE_IMMED_DATA
00001A30                          1091  
00001A30  121A                    1092  IMMED_DATA_LONG         MOVE.B      (A2)+,D1            * D1 stores a byte of the immediate data
00001A32  E189                    1093                          LSL.L       #8,D1               * Shift D1 left 8 bits
00001A34  121A                    1094                          MOVE.B      (A2)+,D1
00001A36  E189                    1095                          LSL.L       #8,D1
00001A38  121A                    1096                          MOVE.B      (A2)+,D1            * D1 stores a byte of the immediate data
00001A3A  E189                    1097                          LSL.L       #8,D1               * Shift D1 left 8 bits
00001A3C  121A                    1098                          MOVE.B      (A2)+,D1            * D1 stores immediate data long
00001A3E                          1099                          
00001A3E  103C 000F               1100                          MOVE.B      #15,D0              * Print immediate data long
00001A42  143C 0010               1101                          MOVE.B      #16,D2
00001A46  4E4F                    1102                          TRAP        #15
00001A48  60C4                    1103                          BRA         EXIT_HANDLE_IMMED_DATA
00001A4A                          1104                       
00001A4A                          1105  *********************************************************************************
00001A4A                          1106  *-------------------------------------------------------------------------------*
00001A4A                          1107  *********************************************************************************
00001A4A                          1108  
00001A4A                          1109  
00001A4A                          1110  
00001A4A                          1111  END                      
00001A4A                          1112                                
00001A4A  FFFF FFFF               1113      SIMHALT             ; halt simulator
00001A4E                          1114  
00001A4E                          1115  * Put variables and constants here
00001A4E  =00007000               1116  stack               EQU             $7000   * Stack pointer start location
00001A4E                          1117  
00001A4E  =0000000D               1118  CR                  EQU             $0D     * Carriage Return
00001A4E  =0000000A               1119  LF                  EQU             $0A     * Line Feed
00001A4E  =00000009               1120  HT                  EQU             $09     * Horizontal Tab
00001A4E                          1121  
00001A4E  =00000000               1122  OPCODE_0            EQU             %0000   * ANDI,SUBI,EORI,CMPI,BCHG
00001A4E  =00000001               1123  OPCODE_1            EQU             %0001   * MOVE.B
00001A4E  =00000002               1124  OPCODE_2            EQU             %0010   * MOVE.L
00001A4E  =00000003               1125  OPCODE_3            EQU             %0011   * MOVE.W
00001A4E  =00000004               1126  OPCODE_4            EQU             %0100   * CLR,RTS,JSR,MOVEM,LEA
00001A4E  =00000005               1127  OPCODE_5            EQU             %0101   * ADDQ
00001A4E  =00000006               1128  OPCODE_6            EQU             %0110   * BCC
00001A4E  =00000007               1129  OPCODE_7            EQU             %0111   * MOVEQ
00001A4E  =00000008               1130  OPCODE_8            EQU             %1000   * DIVS
00001A4E  =00000009               1131  OPCODE_9            EQU             %1001   * SUB,SUBA
00001A4E  =0000000B               1132  OPCODE_B            EQU             %1011   * EOR,CMP,CMPA
00001A4E  =0000000C               1133  OPCODE_C            EQU             %1100   * AND,MULS
00001A4E  =0000000D               1134  OPCODE_D            EQU             %1101   * ADD,ADDA
00001A4E  =0000000E               1135  OPCODE_E            EQU             %1110   * ASL,ASR,LSL,LSR,ROL,ROR
00001A4E                          1136  
00001A4E  =00000000               1137  DR_DIRECT           EQU             %000    * Data Register Direct Mode
00001A4E  =00000001               1138  AR_DIRECT           EQU             %001    * Address Register Direct Mode
00001A4E  =00000002               1139  AR_INDIRECT         EQU             %010    * Address Register Indirect Mode
00001A4E  =00000003               1140  AR_INDIRECT_POST    EQU             %011    * Address Register Indirect Post-Incrementing Mode
00001A4E  =00000004               1141  AR_INDIRECT_PRE     EQU             %100    * Address Register Inderect Pre-Decrementing Mode
00001A4E  =00000007               1142  ABS_ADDR            EQU             %111    * Absolute Address and Immediate Data Mode
00001A4E                          1143  
00001A4E  =00000000               1144  ABS_ADDR_WORD_REG   EQU             %000    * Absolute Word Address Register
00001A4E  =00000001               1145  ABS_ADDR_LONG_REG   EQU             %001    * Absolute Long Address Register
00001A4E  =00000004               1146  IMMEDIATE_DATA      EQU             %100    * Immediate Data Register
00001A4E                          1147  
00001A4E                          1148  
00001A4E= 57 65 6C 63 6F 6D ...   1149  LINE1               DC.B        'Welcome to our 68K Dissassembler.',CR,LF,0
00001A72= 50 6C 65 61 73 65 ...   1150  GETSTARTMESSAGE     DC.B        'Please provide a valid start address.',CR,LF,0
00001A9A= 50 6C 65 61 73 65 ...   1151  GETENDMESSAGE       DC.B        'Please provide a valid end address.',CR,LF,0
00001AC0= 54 68 65 20 69 6E ...   1152  ERRORMESSAGESIZE    DC.B        'The input you have provided is not 32 bits long.  Please provide a valid address',CR,LF,0
00001B13= 54 68 65 20 66 6F ...   1153  INVALID_OPERAND_MODE_MSG   DC.B 'The following operand mode is invalid: ',0
00001B3B= 54 68 65 20 66 6F ...   1154  INVALID_ABS_ADDR_REG_MSG   DC.B 'The following absolute address register is invalid: ',0
00001B70                          1155  
00001B70= 44 00                   1156  PRINT_D             DC.B        'D',0
00001B72= 2C 00                   1157  PRINT_COMMA         DC.B        ',',0
00001B74= 41 00                   1158  PRINT_A             DC.B        'A',0
00001B76= 28 41 00                1159  PRINT_A_INDIRECT    DC.B        '(A',0
00001B79= 29 00                   1160  PRINT_END_PAREN     DC.B        ')',0
00001B7B= 29 2B 00                1161  PRINT_END_PAREN_PLUS    DC.B    ')+',0
00001B7E= 2D 28 00                1162  PRINT_MINUS_A_INDIRECT  DC.B    '-(',0
00001B81= 24 00                   1163  PRINT_DOLLAR        DC.B        '$',0
00001B83= 23 24 00                1164  PRINT_NUM_DOLLAR    DC.B        '#$',0
00001B86                          1165  
00001B86                          1166  
00001B86= 54 68 69 73 20 6D ...   1167  BUGFIXMESSAGE       DC.B        'This message is loaded to resolve a bug, and should never be printed.',CR,LF,0
00001BCE= 49 6E 76 61 6C 69 ...   1168  INVALID_OP_MSG      DC.B        'Invalid Operation Code: ',0
00001BE7= 0D 0A 00                1169  CR_LF_MSG           DC.B        CR,LF,0
00001BEA= 09 00                   1170  TAB_MSG             DC.B        HT,0
00001BEC                          1171  
00001BEC= 4D 4F 56 45 2E 42 ...   1172  PRINT_MOVE_B        DC.B        'MOVE.B',HT,0
00001BF4= 53 55 42 41 2E 57 ...   1173  PRINT_SUB_A_W       DC.B        'SUBA.W',HT,0
00001BFC= 53 55 42 41 2E 4C ...   1174  PRINT_SUB_A_L       DC.B        'SUBA.L',HT,0
00001C04= 53 55 42 2E 42 09 00    1175  PRINT_SUB_B         DC.B        'SUB.B',HT,0
00001C0B= 53 55 42 2E 57 09 00    1176  PRINT_SUB_W         DC.B        'SUB.W',HT,0
00001C12= 53 55 42 2E 4C 09 00    1177  PRINT_SUB_L         DC.B        'SUB.L',HT,0
00001C19= 42 43 48 47 2E 42 ...   1178  PRINT_BCHG_B        DC.B        'BCHG.B',HT,0
00001C21= 42 43 48 47 2E 4C ...   1179  PRINT_BCHG_L        DC.B        'BCHG.L',HT,0
00001C29= 41 4E 44 49 09 00       1180  PRINT_ANDI          DC.B        'ANDI',HT,0
00001C2F= 53 55 42 49 09 00       1181  PRINT_SUBI          DC.B        'SUBI',HT,0
00001C35= 45 4F 52 49 09 00       1182  PRINT_EORI          DC.B        'EORI',HT,0
00001C3B= 43 4D 50 49 09 00       1183  PRINT_CMPI          DC.B        'CMPI',HT,0
00001C41= 2E 42 09 00             1184  PRINT_B             DC.B        '.B',HT,0
00001C45= 2E 57 09 00             1185  PRINT_W             DC.B        '.W',HT,0
00001C49= 2E 4C 09 00             1186  PRINT_L             DC.B        '.L',HT,0
00001C4D                          1187  
00001C4E                          1188  STARTADDRSTRING1    DS.L        1
00001C52                          1189  STARTADDRSTRING2    DS.L        1
00001C56                          1190  HEXSTARTADDR        DS.L        1
00001C5A                          1191  
00001C5A                          1192  ENDADDRSTRING1      DS.L        1
00001C5E                          1193  ENDADDRSTRING2      DS.L        1
00001C62                          1194  HEXENDADDR          DS.L        1
00001C66                          1195  
00001C66                          1196  OP_SIZE             DS.B        1
00001C67                          1197                      END     START           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABS_ADDR            7
ABS_ADDR_LONG_REG   1
ABS_ADDR_WORD_REG   0
AR_DIRECT           1
AR_INDIRECT         2
AR_INDIRECT_POST    3
AR_INDIRECT_PRE     4
BCHG_DN             1526
BCHG_PRINT_B        152E
BCHG_PRINT_D        154A
BCHG_PRINT_L        153E
BEGIN_OP_IDENT      1290
BUGFIXMESSAGE       1B86
CHARISLETTER        10F6
CHARISLETTER2       1138
CHARISLETTER3       118A
CHARISLETTER4       11CC
CHARISNUM           10E2
CHARISNUM2          1124
CHARISNUM3          1176
CHARISNUM4          11B8
COMBINEEND          11E0
COMBINESTART        114C
CONVERTEND1         115C
CONVERTEND2         119E
CONVERTSTART1       10C8
CONVERTSTART2       110A
CR                  D
CR_LF_MSG           1BE7
DR_DIRECT           0
END                 1A4A
ENDADDR             107C
ENDADDRSTRING1      1C5A
ENDADDRSTRING2      1C5E
ERRORINPUTSIZE      1062
ERRORMESSAGESIZE    1AC0
EXIT_HANDLE_IMMED_DATA  1A0E
EXIT_HANDLE_OPERAND  18A4
EXIT_OPERAND_MODE_7  1996
EXIT_PARSE_OP_9     183C
GETENDMESSAGE       1A9A
GETSTARTMESSAGE     1A72
HANDLE_ABS_ADDR_LONG  19BA
HANDLE_ABS_ADDR_WORD  199A
HANDLE_IMMED_DATA   19E2
HANDLE_OPERAND      1840
HEXENDADDR          1C62
HEXSTARTADDR        1C56
HT                  9
IMMEDIATE_DATA      4
IMMED_DATA_BYTE     1A10
IMMED_DATA_LONG     1A30
IMMED_DATA_WORD     1A1E
INVALID_ABS_ADDR_REG  1972
INVALID_ABS_ADDR_REG_MSG  1B3B
INVALID_OPERAND_MODE  1880
INVALID_OPERAND_MODE_MSG  1B13
INVALID_OP_MSG      1BCE
LF                  A
LINE1               1A4E
LOADENDADDR1        10AE
LOADENDADDR2        10C0
LOADSTARTADDR1      1044
LOADSTARTADDR2      1056
NEXTCHAR            10DA
NEXTCHAR2           111C
NEXTCHAR3           116E
NEXTCHAR4           11B0
NO_OP_MATCH         1358
OPCODE_0            0
OPCODE_1            1
OPCODE_2            2
OPCODE_3            3
OPCODE_4            4
OPCODE_5            5
OPCODE_6            6
OPCODE_7            7
OPCODE_8            8
OPCODE_9            9
OPCODE_B            B
OPCODE_C            C
OPCODE_D            D
OPCODE_E            E
OPERAND_MODE_0      18AA
OPERAND_MODE_1      18C4
OPERAND_MODE_2      18DE
OPERAND_MODE_3      1904
OPERAND_MODE_4      192C
OPERAND_MODE_7      1954
OP_IDENT            1296
OP_SIZE             1C66
PARSE_0_ANDI        13DE
PARSE_0_BCHG        14D6
PARSE_0_BCHG_L      1500
PARSE_0_CMPI        140E
PARSE_0_EA          149E
PARSE_0_EORI        13FE
PARSE_0_IMMDATA     1484
PARSE_0_SIZE        141E
PARSE_0_SIZE_B      1440
PARSE_0_SIZE_L      1470
PARSE_0_SIZE_W      1458
PARSE_0_SUBI        13EE
PARSE_BCHG_DATA     150C
PARSE_OF_0_CMP      13B2
PARSE_OP_0          1380
PARSE_OP_1          157E
PARSE_OP_2          15E2
PARSE_OP_3          15E2
PARSE_OP_4          15E2
PARSE_OP_5          15E2
PARSE_OP_6          15E2
PARSE_OP_7          15E2
PARSE_OP_8          15E2
PARSE_OP_9          15E2
PARSE_OP_B          1840
PARSE_OP_C          1840
PARSE_OP_D          1840
PARSE_OP_E          1840
PRINT_A             1B74
PRINT_ANDI          1C29
PRINT_A_INDIRECT    1B76
PRINT_B             1C41
PRINT_BCHG_B        1C19
PRINT_BCHG_L        1C21
PRINT_CMPI          1C3B
PRINT_COMMA         1B72
PRINT_D             1B70
PRINT_DOLLAR        1B81
PRINT_END_PAREN     1B79
PRINT_END_PAREN_PLUS  1B7B
PRINT_EORI          1C35
PRINT_L             1C49
PRINT_MINUS_A_INDIRECT  1B7E
PRINT_MOVE_B        1BEC
PRINT_NUM_DOLLAR    1B83
PRINT_SUBI          1C2F
PRINT_SUB_A_L       1BFC
PRINT_SUB_A_W       1BF4
PRINT_SUB_B         1C04
PRINT_SUB_L         1C12
PRINT_SUB_W         1C0B
PRINT_W             1C45
PROMPTENDADDR       1090
PROMPTSTARTADDR     1026
RET_SUB_DN_EA       17EA
RET_SUB_EA_DN       173A
STACK               7000
START               1000
STARTADDRSTRING1    1C4E
STARTADDRSTRING2    1C52
SUB_A_LONG          1674
SUB_A_WORD          160E
SUB_DN_EA           178A
SUB_DN_EA_BYTE      17A2
SUB_DN_EA_LONG      17D2
SUB_DN_EA_WORD      17BA
SUB_EA_DN           16DA
SUB_EA_DN_BYTE      16F2
SUB_EA_DN_LONG      1722
SUB_EA_DN_WORD      170A
TAB_MSG             1BEA
