00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 3/11/2015 9:21:41 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  68K Disassembler
00000000                             3  * Written by :  Chance O'Day, Sara Jackson, and Bonnie Vo
00000000                             4  * Date       :  3/6/2015
00000000                             5  * Description:  A disassembler program that will convert a
00000000                             6  *               memory image of instructions and data back
00000000                             7  *               to 68000 assembly language and output the
00000000                             8  *               disassembled code to the display.
00000000                             9  *
00000000                            10  *               Displays an opening message and prompts
00000000                            11  *               the user for the start and end address
00000000                            12  *               for the program to be disassembled.
00000000                            13  *-----------------------------------------------------------
00001000                            14                  ORG         $1000
00001000  4FF9 00007000             15  START:          LEA         stack,SP
00001006  43F9 00001BC4             16                  LEA         LINE1,A1                * Display welcome message to console
0000100C  103C 000E                 17                  MOVE.B      #14,D0
00001010  4E4F                      18                  TRAP        #15
00001012                            19              
00001012  43F9 00001BE8             20                  LEA         GETSTARTMESSAGE,A1      * Display prompt for start address
00001018  103C 000E                 21                  MOVE.B      #14,D0
0000101C  4E4F                      22                  TRAP        #15
0000101E                            23                  
0000101E  1E3C 0001                 24                  MOVE.B      #1,D7
00001022  1C3C 0000                 25                  MOVE.B      #0,D6                   * Toggle for start/end address prompting: 0 = start, 1 = end
00001026                            26              
00001026  103C 0002                 27  PROMPTSTARTADDR MOVE.B      #2,D0                   * Read starting address string from console
0000102A  4E4F                      28                  TRAP        #15
0000102C                            29              
0000102C  143C 0008                 30                  MOVE.B      #8,D2
00001030  B441                      31                  CMP.W       D1,D2                   * Check start address size
00001032  6600 002E                 32                  BNE         ERRORINPUTSIZE          * Branch if address size error
00001036  143C 0004                 33                  MOVE.B      #4,D2
0000103A  163C 0000                 34                  MOVE.B      #0,D3
0000103E                            35                              
0000103E  45F9 00001DC0             36                  LEA         STARTADDRSTRING1,A2     * Load ASCII of the first half of start address to A2 register
00001044  14D9                      37  LOADSTARTADDR1  MOVE.B      (A1)+,(A2)+
00001046  5203                      38                  ADD.B       #1,D3
00001048  B602                      39                  CMP.B       D2,D3
0000104A  66F8                      40                  BNE         LOADSTARTADDR1
0000104C                            41                  
0000104C  163C 0000                 42                  MOVE.B      #0,D3
00001050  45F9 00001DC4             43                  LEA         STARTADDRSTRING2,A2     * Load ASCII of the second half of start address to A2 register
00001056  14D9                      44  LOADSTARTADDR2  MOVE.B      (A1)+,(A2)+
00001058  5203                      45                  ADD.B       #1,D3
0000105A  B602                      46                  CMP.B       D2,D3
0000105C  66F8                      47                  BNE         LOADSTARTADDR2
0000105E  6000 001C                 48                  BRA         ENDADDR
00001062                            49              
00001062  43F9 00001C36             50  ERRORINPUTSIZE  LEA         ERRORMESSAGESIZE,A1     * Start/End Address Error
00001068  103C 000E                 51                  MOVE.B      #14,D0
0000106C  4E4F                      52                  TRAP        #15
0000106E                            53                  
0000106E  43F9 00001CFC             54                  LEA         BUGFIXMESSAGE,A1
00001074  BC07                      55                  CMP.B       D7,D6
00001076  66AE                      56                  BNE         PROMPTSTARTADDR
00001078  6000 0016                 57                  BRA         PROMPTENDADDR
0000107C                            58                  
0000107C  43F9 00001C10             59  ENDADDR         LEA         GETENDMESSAGE,A1        * Display prompt for end address
00001082  103C 000E                 60                  MOVE.B      #14,D0
00001086  4E4F                      61                  TRAP        #15
00001088  1C3C 0001                 62                  MOVE.B      #1,D6
0000108C  143C 0008                 63                  MOVE.B      #8,D2
00001090                            64                  
00001090                            65                  
00001090  227C 00005000             66  PROMPTENDADDR   MOVEA.L     #$5000,A1
00001096  103C 0002                 67                  MOVE.B      #2,D0                   * Read end address string from console
0000109A  4E4F                      68                  TRAP        #15
0000109C                            69                  
0000109C  B441                      70                  CMP.W       D1,D2                   * Check end address size
0000109E  66C2                      71                  BNE         ERRORINPUTSIZE          * Branch if address size error
000010A0                            72                  
000010A0  143C 0004                 73                  MOVE.B      #4,D2
000010A4  163C 0000                 74                  MOVE.B      #0,D3
000010A8  45F9 00001DCC             75                  LEA         ENDADDRSTRING1,A2       * Load ASCII of the first half of end address to A2 register
000010AE  14D9                      76  LOADENDADDR1    MOVE.B      (A1)+,(A2)+
000010B0  5203                      77                  ADD.B       #1,D3
000010B2  B602                      78                  CMP.B       D2,D3
000010B4  66F8                      79                  BNE         LOADENDADDR1
000010B6                            80                  
000010B6  163C 0000                 81                  MOVE.B      #0,D3
000010BA  45F9 00001DD0             82                  LEA         ENDADDRSTRING2,A2       * Load ASCII of the second half of end address to A2 register
000010C0  14D9                      83  LOADENDADDR2    MOVE.B      (A1)+,(A2)+
000010C2  5203                      84                  ADD.B       #1,D3
000010C4  B602                      85                  CMP.B       D2,D3
000010C6  66F8                      86                  BNE         LOADENDADDR2
000010C8                            87                                 
000010C8  2239 00001DC0             88  CONVERTSTART1   MOVE.L      STARTADDRSTRING1,D1
000010CE  1C3C 0000                 89                  MOVE.B      #0,D6
000010D2  1A3C 0004                 90                  MOVE.B      #4,D5
000010D6  163C 0039                 91                  MOVE.B      #$39,D3
000010DA                            92                  
000010DA  1401                      93  NEXTCHAR        MOVE.B      D1,D2
000010DC  B602                      94                  CMP.B       D2,D3
000010DE  6D00 0016                 95                  BLT         CHARISLETTER
000010E2                            96                  
000010E2  0402 0030                 97  CHARISNUM       SUB.B       #48,D2
000010E6  1E02                      98                  MOVE.B      D2,D7
000010E8  E89F                      99                  ROR.L       #4,D7
000010EA  E099                     100                  ROR.L       #8,D1
000010EC  5206                     101                  ADD.B       #1,D6
000010EE  BA06                     102                  CMP.B       D6,D5
000010F0  6700 0018                103                  BEQ         CONVERTSTART2
000010F4  60E4                     104                  BRA         NEXTCHAR
000010F6                           105  
000010F6  0402 0037                106  CHARISLETTER    SUB.B       #55,D2
000010FA  1E02                     107                  MOVE.B      D2,D7
000010FC  E89F                     108                  ROR.L       #4,D7
000010FE  E099                     109                  ROR.L       #8,D1
00001100  5206                     110                  ADD.B       #1,D6
00001102  BA06                     111                  CMP.B       D6,D5
00001104  6700 0004                112                  BEQ         CONVERTSTART2
00001108  60D0                     113                  BRA         NEXTCHAR
0000110A                           114                  
0000110A  2239 00001DC4            115  CONVERTSTART2   MOVE.L      STARTADDRSTRING2,D1
00001110  1C3C 0000                116                  MOVE.B      #0,D6
00001114  1A3C 0004                117                  MOVE.B      #4,D5
00001118  163C 0039                118                  MOVE.B      #$39,D3
0000111C                           119                  
0000111C  1401                     120  NEXTCHAR2       MOVE.B      D1,D2
0000111E  B602                     121                  CMP.B       D2,D3
00001120  6D00 0016                122                  BLT         CHARISLETTER2
00001124                           123  
00001124  0402 0030                124  CHARISNUM2      SUB.B       #48,D2
00001128  1802                     125                  MOVE.B      D2,D4
0000112A  E89C                     126                  ROR.L       #4,D4
0000112C  E099                     127                  ROR.L       #8,D1
0000112E  5206                     128                  ADD.B       #1,D6
00001130  BA06                     129                  CMP.B       D6,D5
00001132  6700 0018                130                  BEQ         COMBINESTART
00001136  60E4                     131                  BRA         NEXTCHAR2
00001138                           132  
00001138                           133                  
00001138  0402 0037                134  CHARISLETTER2   SUB.B       #55,D2
0000113C  1802                     135                  MOVE.B      D2,D4
0000113E  E89C                     136                  ROR.L       #4,D4
00001140  E099                     137                  ROR.L       #8,D1
00001142  5206                     138                  ADD.B       #1,D6
00001144  BA06                     139                  CMP.B       D6,D5
00001146  6700 0004                140                  BEQ         COMBINESTART
0000114A  60D0                     141                  BRA         NEXTCHAR2
0000114C                           142                  
0000114C  E09C                     143  COMBINESTART    ROR.L       #8,D4
0000114E  E09C                     144                  ROR.L       #8,D4
00001150  DE84                     145                  ADD.L       D4,D7
00001152  23C7 00001DC8            146                  MOVE.L      D7,HEXSTARTADDR
00001158  7E00                     147                  MOVE.L      #$00000000,D7
0000115A  7800                     148                  MOVE.L      #$00000000,D4
0000115C                           149                  
0000115C  2239 00001DCC            150  CONVERTEND1     MOVE.L      ENDADDRSTRING1,D1
00001162  1C3C 0000                151                  MOVE.B      #0,D6
00001166  1A3C 0004                152                  MOVE.B      #4,D5
0000116A  163C 0039                153                  MOVE.B      #$39,D3
0000116E                           154                  
0000116E  1401                     155  NEXTCHAR3       MOVE.B      D1,D2
00001170  B602                     156                  CMP.B       D2,D3
00001172  6D00 0016                157                  BLT         CHARISLETTER3
00001176                           158                  
00001176  0402 0030                159  CHARISNUM3      SUB.B       #48,D2
0000117A  1E02                     160                  MOVE.B      D2,D7
0000117C  E89F                     161                  ROR.L       #4,D7
0000117E  E099                     162                  ROR.L       #8,D1
00001180  5206                     163                  ADD.B       #1,D6
00001182  BA06                     164                  CMP.B       D6,D5
00001184  6700 0018                165                  BEQ         CONVERTEND2
00001188  60E4                     166                  BRA         NEXTCHAR3
0000118A                           167  
0000118A  0402 0037                168  CHARISLETTER3   SUB.B       #55,D2
0000118E  1E02                     169                  MOVE.B      D2,D7
00001190  E89F                     170                  ROR.L       #4,D7
00001192  E099                     171                  ROR.L       #8,D1
00001194  5206                     172                  ADD.B       #1,D6
00001196  BA06                     173                  CMP.B       D6,D5
00001198  6700 0004                174                  BEQ         CONVERTEND2
0000119C  60D0                     175                  BRA         NEXTCHAR3
0000119E                           176                  
0000119E  2239 00001DD0            177  CONVERTEND2     MOVE.L      ENDADDRSTRING2,D1
000011A4  1C3C 0000                178                  MOVE.B      #0,D6
000011A8  1A3C 0004                179                  MOVE.B      #4,D5
000011AC  163C 0039                180                  MOVE.B      #$39,D3
000011B0                           181                  
000011B0  1401                     182  NEXTCHAR4       MOVE.B      D1,D2
000011B2  B602                     183                  CMP.B       D2,D3
000011B4  6D00 0016                184                  BLT         CHARISLETTER4
000011B8                           185  
000011B8  0402 0030                186  CHARISNUM4      SUB.B       #48,D2
000011BC  1802                     187                  MOVE.B      D2,D4
000011BE  E89C                     188                  ROR.L       #4,D4
000011C0  E099                     189                  ROR.L       #8,D1
000011C2  5206                     190                  ADD.B       #1,D6
000011C4  BA06                     191                  CMP.B       D6,D5
000011C6  6700 0018                192                  BEQ         COMBINEEND
000011CA  60E4                     193                  BRA         NEXTCHAR4
000011CC                           194  
000011CC                           195                  
000011CC  0402 0037                196  CHARISLETTER4   SUB.B       #55,D2
000011D0  1802                     197                  MOVE.B      D2,D4
000011D2  E89C                     198                  ROR.L       #4,D4
000011D4  E099                     199                  ROR.L       #8,D1
000011D6  5206                     200                  ADD.B       #1,D6
000011D8  BA06                     201                  CMP.B       D6,D5
000011DA  6700 0004                202                  BEQ         COMBINEEND
000011DE  60D0                     203                  BRA         NEXTCHAR4
000011E0                           204                  
000011E0  E09C                     205  COMBINEEND      ROR.L       #8,D4
000011E2  E09C                     206                  ROR.L       #8,D4
000011E4  DE84                     207                  ADD.L       D4,D7
000011E6  23C7 00001DD4            208                  MOVE.L      D7,HEXENDADDR
000011EC  7E00                     209                  MOVE.L      #$00000000,D7
000011EE  7800                     210                  MOVE.L      #$00000000,D4
000011F0                           211  
000011F0                           212  *  TEST CODE FOR DEMONSTRATING THE VALUES IN THE VARIABLES                
000011F0                           213  *                MOVE.L      HEXSTARTADDR,D0
000011F0                           214  *                MOVE.L      HEXENDADDR,D1
000011F0                           215                  
000011F0                           216  *                MOVE.L      STARTADDRSTRING1,D2
000011F0                           217  *                MOVE.L      STARTADDRSTRING2,D3
000011F0                           218  *                MOVE.L      ENDADDRSTRING1,D4
000011F0                           219  *                MOVE.L      ENDADDRSTRING2,D5
000011F0                           220  
000011F0                           221  ****************************************************************************
000011F0                           222  *--------------------------------------------------------------------------*
000011F0                           223  ****************************************************************************
000011F0                           224  * Clear all registers to move on to next segment
000011F0  4280                     225                  CLR.L       D0
000011F2  4281                     226                  CLR.L       D1
000011F4  4282                     227                  CLR.L       D2
000011F6  4283                     228                  CLR.L       D3
000011F8  4284                     229                  CLR.L       D4
000011FA  4285                     230                  CLR.L       D5
000011FC  4286                     231                  CLR.L       D6
000011FE  4287                     232                  CLR.L       D7
00001200  2040                     233                  MOVE.L      D0,A0
00001202  2240                     234                  MOVE.L      D0,A1
00001204  2440                     235                  MOVE.L      D0,A2
00001206  2640                     236                  MOVE.L      D0,A3
00001208  2840                     237                  MOVE.L      D0,A4
0000120A  2A40                     238                  MOVE.L      D0,A5
0000120C  2C40                     239                  MOVE.L      D0,A6
0000120E  2E40                     240                  MOVE.L      D0,A7                
00001210                           241  
00001210                           242  *-----------------------TEST CODE-----------------------------------------------------                
00001210  33FC 1207 C0680000       243                  MOVE.W      #$1207,$C0680000        * Fills data to show that following code works correctly.
00001218  33FC 143C C0680002       244                  MOVE.W      #$143C,$C0680002
00001220  13FC 0017 C0680004       245                  MOVE.B      #$17,$C0680004
00001228  13FC 001A C0680005       246                  MOVE.B      #$1A,$C0680005
00001230  13FC 00BC C0680006       247                  MOVE.B      #$BC,$C0680006
00001238  13FC 0033 C0680007       248                  MOVE.B      #$33,$C0680007
00001240                           249                  
00001240  13FC 0098 C0680008       250                  MOVE.B      #$98,$C0680008
00001248  13FC 0014 C0680009       251                  MOVE.B      #$14,$C0680009          * SUB.B  (A4),D4
00001250                           252                  
00001250  13FC 0094 C068000A       253                  MOVE.B      #$94,$C068000A
00001258  13FC 0044 C068000B       254                  MOVE.B      #$44,$C068000B          * SUB.W  D4,D2
00001260                           255                  
00001260  13FC 0095 C068000C       256                  MOVE.B      #$95,$C068000C
00001268  13FC 0094 C068000D       257                  MOVE.B      #$94,$C068000D          * SUB.L  D2,(A4)
00001270                           258                  
00001270  13FC 0092 C068000E       259                  MOVE.B      #$92,$C068000E 
00001278  13FC 00DC C068000F       260                  MOVE.B      #$DC,$C068000F          * SUBA.W (A4)+,A1
00001280                           261                  
00001280  13FC 0099 C0680010       262                  MOVE.B      #$99,$C0680010
00001288  13FC 00CF C0680011       263                  MOVE.B      #$CF,$C0680011          * SUBA.L  A7,A4
00001290                           264                  
00001290  33FC 0204 C0680012       265                  MOVE.W      #$0204,$C0680012        * ANDI.B    #$33,D4
00001298  33FC 0033 C0680014       266                  MOVE.W      #$0033,$C0680014
000012A0                           267                  
000012A0  33FC 0253 C0680016       268                  MOVE.W      #$0253,$C0680016        * ANDI.W    #$8888,(A3)
000012A8  33FC 8888 C0680018       269                  MOVE.W      #$8888,$C0680018
000012B0                           270                  
000012B0  33FC 029B C068001A       271                  MOVE.W      #$029B,$C068001A        * ANDI.L    #$AAAAAAAA,(A3)+
000012B8  33FC AAAA C068001C       272                  MOVE.W      #$AAAA,$C068001C
000012C0  33FC AAAA C068001E       273                  MOVE.W      #$AAAA,$C068001E
000012C8                           274                  
000012C8  33FC 0414 C0680020       275                  MOVE.W      #$0414,$C0680020        * SUBI.B    #$AA,(A4)
000012D0  33FC 00AA C0680022       276                  MOVE.W      #$00AA,$C0680022
000012D8                           277                  
000012D8  33FC 0444 C0680024       278                  MOVE.W      #$0444,$C0680024        * SUBI.W    #$8888,D4
000012E0  33FC 8888 C0680026       279                  MOVE.W      #$8888,$C0680026
000012E8                           280                  
000012E8  33FC 0484 C0680028       281                  MOVE.W      #$0484,$C0680028        * SUBI.L    #$AAAAAAAA,D4
000012F0  33FC AAAA C068002A       282                  MOVE.W      #$AAAA,$C068002A
000012F8  33FC AAAA C068002C       283                  MOVE.W      #$AAAA,$C068002C
00001300                           284                  
00001300  33FC 0A24 C068002E       285                  MOVE.W      #$0A24,$C068002E        * EORI.B    #$33,-(A4)
00001308  33FC 0033 C0680030       286                  MOVE.W      #$0033,$C0680030
00001310                           287                  
00001310  33FC 0A44 C0680032       288                  MOVE.W      #$0A44,$C0680032        * EORI.W    #$AAAA,D4
00001318  33FC AAAA C0680034       289                  MOVE.W      #$AAAA,$C0680034
00001320                           290                  
00001320  33FC 0A84 C0680036       291                  MOVE.W      #$0A84,$C0680036        * EORI.L    #$12345678,D4
00001328  33FC 1234 C0680038       292                  MOVE.W      #$1234,$C0680038
00001330  33FC 5678 C068003A       293                  MOVE.W      #$5678,$C068003A
00001338                           294                  
00001338  33FC 0C03 C068003C       295                  MOVE.W      #$0C03,$C068003C        * CMPI.B    #$11,D3
00001340  33FC 0011 C068003E       296                  MOVE.W      #$0011,$C068003E
00001348                           297                  
00001348  33FC 0C46 C0680040       298                  MOVE.W      #$0C46,$C0680040        * CMPI.W    #$1234,D6
00001350  33FC 1234 C0680042       299                  MOVE.W      #$1234,$C0680042
00001358                           300                  
00001358  33FC 0C84 C0680044       301                  MOVE.W      #$0C84,$C0680044        * CMPI.L    #$AAAAAAAA,D4
00001360  33FC AAAA C0680046       302                  MOVE.W      #$AAAA,$C0680046
00001368  33FC AAAA C0680048       303                  MOVE.W      #$AAAA,$C0680048
00001370                           304                  
00001370  33FC 0953 C068004A       305                  MOVE.W      #$0953,$C068004A        * BCHG.B    D4,(A3)
00001378                           306                  
00001378  33FC 085C C068004C       307                  MOVE.W      #$085C,$C068004C        * BCHG.B    #$44,(A4)+
00001380  33FC 0044 C068004E       308                  MOVE.W      #$0044,$C068004E
00001388                           309                  
00001388  33FC 0742 C0680050       310                  MOVE.W      #$0742,$C0680050        * BCHG.L    D3,D2
00001390                           311                  
00001390  33FC 0843 C0680052       312                  MOVE.W      #$0843,$C0680052        * BCHG.L    #AAAAAAAA,D3
00001398  33FC AAAA C0680054       313                  MOVE.W      #$AAAA,$C0680054
000013A0  33FC AAAA C0680056       314                  MOVE.W      #$AAAA,$C0680056
000013A8                           315  
000013A8                           316                  
000013A8                           317                * 0001 0100 0011 1100   = binary for MOVE.B immediate data to D2
000013A8                           318  *--------------------------------------------------------------------------
000013A8                           319                  
000013A8  2479 00001DC8            320  BEGIN_OP_IDENT  MOVE.L      HEXSTARTADDR,A2         * A2 is RESERVED for walking through the target code.
000013AE                           321  
000013AE  2039 00001DD4            322  OP_IDENT        MOVE.L      HEXENDADDR,D0
000013B4  220A                     323                  MOVE.L      A2,D1
000013B6  B280                     324                  CMP.L       D0,D1
000013B8  6E00 07EC                325                  BGT         END                     * Branch to end if current address is greater than ending address.
000013BC                           326  
000013BC  220A                     327                  MOVE.L      A2,D1                   * Print current address.  TODO: Add tab **************************
000013BE  103C 000F                328                  MOVE.B      #15,D0
000013C2  143C 0010                329                  MOVE.B      #16,D2
000013C6  4E4F                     330                  TRAP        #15
000013C8                           331                  
000013C8  43F9 00001D60            332                  LEA         TAB_MSG,A1
000013CE  103C 000E                333                  MOVE.B      #14,D0
000013D2  4E4F                     334                  TRAP        #15
000013D4                           335  
000013D4  1E1A                     336                  MOVE.B      (A2)+,D7       
000013D6  E15F                     337                  ROL.W       #8,D7
000013D8  1E1A                     338                  MOVE.B      (A2)+,D7                * D7 storing 16 bits of Machine Code into D7. Only WORD data is relevant.
000013DA                           339                  
000013DA  343C F000                340                  MOVE.W      #$F000,D2                
000013DE  C447                     341                  AND.W       D7,D2                   * D2 storing the nibble representing opcode.
000013E0  E09A                     342                  ROR.L       #8,D2
000013E2  E89A                     343                  ROR.L       #4,D2
000013E4                           344                  
000013E4  163C 0000                345                  MOVE.B      #OPCODE_0,D3            * ANDI,SUBI,EORI,CMPI,BCHG
000013E8  B602                     346                  CMP.B       D2,D3
000013EA  6700 00AC                347                  BEQ         PARSE_OP_0
000013EE                           348                  
000013EE  163C 0001                349                  MOVE.B      #OPCODE_1,D3            * MOVE BYTE
000013F2  B602                     350                  CMP.B       D2,D3
000013F4  6700 0292                351                  BEQ         PARSE_OP_1
000013F8                           352                  
000013F8  163C 0002                353                  MOVE.B      #OPCODE_2,D3            * MOVE LONG
000013FC  B602                     354                  CMP.B       D2,D3
000013FE  6700 02EC                355                  BEQ         PARSE_OP_2                
00001402                           356  
00001402  163C 0003                357                  MOVE.B      #OPCODE_3,D3            * MOVE WORD
00001406  B602                     358                  CMP.B       D2,D3
00001408  6700 02E2                359                  BEQ         PARSE_OP_3
0000140C                           360                  
0000140C  163C 0004                361                  MOVE.B      #OPCODE_4,D3            * CLR,RTS,JSR,MOVEM,LEA
00001410  B602                     362                  CMP.B       D2,D3
00001412  6700 02D8                363                  BEQ         PARSE_OP_4
00001416                           364                  
00001416  163C 0005                365                  MOVE.B      #OPCODE_5,D3            * ADDQ
0000141A  B602                     366                  CMP.B       D2,D3
0000141C  6700 02CE                367                  BEQ         PARSE_OP_5
00001420                           368                  
00001420  163C 0006                369                  MOVE.B      #OPCODE_6,D3            * BCC
00001424  B602                     370                  CMP.B       D2,D3
00001426  6700 02C4                371                  BEQ         PARSE_OP_6                
0000142A                           372  
0000142A  163C 0007                373                  MOVE.B      #OPCODE_7,D3            * MOVEQ
0000142E  B602                     374                  CMP.B       D2,D3
00001430  6700 02BA                375                  BEQ         PARSE_OP_7
00001434                           376  
00001434  163C 0008                377                  MOVE.B      #OPCODE_8,D3            * DIVS
00001438  B602                     378                  CMP.B       D2,D3
0000143A  6700 02B0                379                  BEQ         PARSE_OP_8
0000143E                           380                  
0000143E  163C 0009                381                  MOVE.B      #OPCODE_9,D3            * SUB,SUBA
00001442  B602                     382                  CMP.B       D2,D3
00001444  6700 02A6                383                  BEQ         PARSE_OP_9
00001448                           384                  
00001448  163C 000B                385                  MOVE.B      #OPCODE_B,D3            * EOR,CMP,CMPA
0000144C  B602                     386                  CMP.B       D2,D3
0000144E  6700 04FA                387                  BEQ         PARSE_OP_B                
00001452                           388  
00001452  163C 000C                389                  MOVE.B      #OPCODE_C,D3            * AND,MULS
00001456  B602                     390                  CMP.B       D2,D3
00001458  6700 04F0                391                  BEQ         PARSE_OP_C
0000145C                           392  
0000145C  163C 000D                393                  MOVE.B      #OPCODE_D,D3            * ADD,ADDA
00001460  B602                     394                  CMP.B       D2,D3
00001462  6700 04E6                395                  BEQ         PARSE_OP_D
00001466                           396                  
00001466  163C 000E                397                  MOVE.B      #OPCODE_E,D3            * ASL,ASR,LSL,LSR,ROL,ROR
0000146A  B602                     398                  CMP.B       D2,D3
0000146C  6700 04DC                399                  BEQ         PARSE_OP_E
00001470                           400                                  
00001470                           401                  
00001470                           402                  *CASE where nothing matched, bad data. report to user. Skip to next 16 bit code
00001470  43F9 00001D44            403  NO_OP_MATCH     LEA         INVALID_OP_MSG,A1
00001476  103C 000E                404                  MOVE.B      #14,D0
0000147A  4E4F                     405                  TRAP        #15
0000147C                           406                  
0000147C  2202                     407                  MOVE.L      D2,D1
0000147E  103C 000F                408                  MOVE.B      #15,D0
00001482  143C 0002                409                  MOVE.B      #2,D2
00001486  4E4F                     410                  TRAP        #15
00001488                           411                  
00001488  43F9 00001D5D            412                  LEA         CR_LF_MSG,A1
0000148E  103C 000E                413                  MOVE.B      #14,D0
00001492  4E4F                     414                  TRAP        #15
00001494                           415                  
00001494  6000 FF18                416                  BRA         OP_IDENT
00001498                           417   
00001498                           418  ****************************************************************************
00001498                           419  *--------------------------------------------------------------------------*
00001498                           420  ****************************************************************************
00001498                           421                 
00001498                           422  * USABLE REGISTERS FOR THIS SECTION:  D0-D6, A3-A6 (A0, A1, A7 usable if necessary, but refrain)
00001498                           423  * Before branching to HANDLE_OPERAND, put Register in D6, Mode in D5 and size in OP_SIZE.                
00001498                           424  
00001498                           425  ****************************************************************************
00001498                           426  *--------------------------------Parse Operations--------------------------*
00001498                           427  ****************************************************************************
00001498                           428  
00001498                           429  * ANDI,SUBI,EORI,CMPI,BCHG
00001498  3607                     430  PARSE_OP_0      MOVE.W      D7,D3                   * D6 stores replicate of 16 bits stored in D7
0000149A  343C 01C0                431                  MOVE.W      #$01C0,D2               * First Case: BitMask to check if BCHG Dn,<EA>
0000149E  C642                     432                  AND.W       D2,D3
000014A0                           433                  
000014A0  3C07                     434                  MOVE.W      D7,D6                   * EA for ANDI,SUBI,BCHG,EORI,CMPI
000014A2  3A3C 003F                435                  MOVE.W      #$003F,D5
000014A6  CC45                     436                  AND.W       D5,D6
000014A8                           437                  
000014A8  3A3C 0007                438                  MOVE.W      #%000111,D5
000014AC  CA46                     439                  AND.W       D6,D5
000014AE  E64E                     440                  LSR.W       #3,D6
000014B0                           441                  
000014B0  3806                     442                  MOVE.W      D6,D4                   * Temp memory for swap
000014B2  3C05                     443                  MOVE.W      D5,D6                   * D6 stores Register
000014B4  3A04                     444                  MOVE.W      D4,D5                   * D5 stores Mode
000014B6                           445                  
000014B6  EC4B                     446                  LSR.W       #6,D3                   * Shift the BitMask to compare if BCHG Dn,<EA>
000014B8  0C43 0005                447                  CMPI.W      #%0101,D3
000014BC  6700 017E                448                  BEQ         BCHG_DN
000014C0                           449                  
000014C0  3607                     450                  MOVE.W      D7,D3                   * Check for other cases
000014C2  383C 0F00                451                  MOVE.W      #$0F00,D4               * BitMask to check other cases
000014C6  C644                     452                  AND.W       D4,D3
000014C8  E04B                     453                  LSR.W       #8,D3                   * Shift the BitMask to compare
000014CA                           454                  
000014CA  0C43 0008                455  PARSE_OF_0_CMP  CMPI.W      #%1000,D3               * BCHG #<data>,<EA>
000014CE  6700 0112                456                  BEQ         PARSE_0_BCHG
000014D2                           457  
000014D2  0C43 0002                458                  CMPI.W      #%0010,D3               * ANDI #<data>,<EA>
000014D6  6700 001E                459                  BEQ         PARSE_0_ANDI
000014DA                           460                  
000014DA  0C43 0004                461                  CMPI.W      #%0100,D3               * SUBI #<data>,<EA>
000014DE  6700 0026                462                  BEQ         PARSE_0_SUBI
000014E2                           463                  
000014E2  0C43 000A                464                  CMPI.W      #%1010,D3               * EORI #<data>,<EA>
000014E6  6700 002E                465                  BEQ         PARSE_0_EORI
000014EA                           466                  
000014EA  0C43 000C                467                  CMPI.W      #%1100,D3               * CMPI #<data>,<EA>
000014EE  6700 0036                468                  BEQ         PARSE_0_CMPI
000014F2                           469                  
000014F2  6000 FF7C                470                  BRA         NO_OP_MATCH             * BRANCH if No Match
000014F6                           471                  
000014F6  43F9 00001D9F            472  PARSE_0_ANDI    LEA         PRINT_ANDI,A1           * Print ANDI
000014FC  103C 000E                473                  MOVE.B      #14,D0
00001500  4E4F                     474                  TRAP        #15
00001502  6000 0032                475                  BRA         PARSE_0_SIZE
00001506                           476  
00001506  43F9 00001DA4            477  PARSE_0_SUBI    LEA         PRINT_SUBI,A1           * Print SUBI
0000150C  103C 000E                478                  MOVE.B      #14,D0
00001510  4E4F                     479                  TRAP        #15
00001512  6000 0022                480                  BRA         PARSE_0_SIZE
00001516                           481  
00001516  43F9 00001DA9            482  PARSE_0_EORI    LEA         PRINT_EORI,A1           * Print EORI
0000151C  103C 000E                483                  MOVE.B      #14,D0
00001520  4E4F                     484                  TRAP        #15
00001522  6000 0012                485                  BRA         PARSE_0_SIZE
00001526                           486  
00001526  43F9 00001DAE            487  PARSE_0_CMPI    LEA         PRINT_CMPI,A1           * Print CMPI
0000152C  103C 000E                488                  MOVE.B      #14,D0
00001530  4E4F                     489                  TRAP        #15
00001532  6000 0002                490                  BRA         PARSE_0_SIZE
00001536                           491                  
00001536  3407                     492  PARSE_0_SIZE    MOVE.W      D7,D2                   * Need to check for size
00001538  323C 00C0                493                  MOVE.W      #$00C0,D1               * BitMask to check size
0000153C  C242                     494                  AND.W       D2,D1
0000153E  EC49                     495                  LSR.W       #6,D1                   * Shift the BitMask to compare
00001540                           496                  
00001540  0C01 0000                497                  CMPI.B      #%0000,D1               * Byte size
00001544  6700 0012                498                  BEQ         PARSE_0_SIZE_B
00001548                           499                  
00001548  0C01 0001                500                  CMPI.B      #%0001,D1               * Word size
0000154C  6700 0022                501                  BEQ         PARSE_0_SIZE_W
00001550                           502                  
00001550  0C01 0002                503                  CMPI.B      #%0010,D1               * Long size
00001554  6700 0032                504                  BEQ         PARSE_0_SIZE_L
00001558                           505                  
00001558  13FC 0001 00001DD8       506  PARSE_0_SIZE_B  MOVE.B      #$01,OP_SIZE            * Sets OP_SIZE to word
00001560  43F9 00001DB3            507                  LEA         PRINT_B,A1              * Print .B
00001566  103C 000E                508                  MOVE.B      #14,D0
0000156A  4E4F                     509                  TRAP        #15
0000156C  6000 002E                510                  BRA         PARSE_0_IMMDATA 
00001570                           511                  
00001570  13FC 0001 00001DD8       512  PARSE_0_SIZE_W  MOVE.B      #$01,OP_SIZE            * Sets OP_SIZE to word
00001578  43F9 00001DB7            513                  LEA         PRINT_W,A1              * Print .W
0000157E  103C 000E                514                  MOVE.B      #14,D0
00001582  4E4F                     515                  TRAP        #15               
00001584  6000 0016                516                  BRA         PARSE_0_IMMDATA 
00001588                           517                  
00001588  13FC 0002 00001DD8       518  PARSE_0_SIZE_L  MOVE.B      #$02,OP_SIZE            * Sets OP_SIZE to long
00001590  43F9 00001DBB            519                  LEA         PRINT_L,A1              * Print .L
00001596  103C 000E                520                  MOVE.B      #14,D0
0000159A  4E4F                     521                  TRAP        #15
0000159C                           522                  
0000159C  3A3C 0007                523  PARSE_0_IMMDATA MOVE.W      #$0007,D5               * Set immediate data mode
000015A0  3C3C 0004                524                  MOVE.W      #$0004,D6               * Set immediate data register
000015A4                           525  
000015A4  4EB9 0000194A            526                  JSR         HANDLE_OPERAND          * Enter Subroutine to print out immediate data
000015AA                           527                  
000015AA  43F9 00001CE8            528  PARSE_0_EA      LEA         PRINT_COMMA,A1          * Print comma
000015B0  103C 000E                529                  MOVE.B      #14,D0
000015B4  4E4F                     530                  TRAP        #15   
000015B6                           531  
000015B6  3C07                     532                  MOVE.W      D7,D6                   * EA for ANDI,SUBI,BCHG,EORI,CMPI
000015B8  3A3C 003F                533                  MOVE.W      #$003F,D5
000015BC  CC45                     534                  AND.W       D5,D6
000015BE                           535                  
000015BE  3A3C 0007                536                  MOVE.W      #%000111,D5
000015C2  CA46                     537                  AND.W       D6,D5
000015C4  E64E                     538                  LSR.W       #3,D6
000015C6                           539                  
000015C6  3806                     540                  MOVE.W      D6,D4                   * Temp memory for swap
000015C8  3C05                     541                  MOVE.W      D5,D6                   * D6 stores Register
000015CA  3A04                     542                  MOVE.W      D4,D5                   * D5 stores Mode
000015CC                           543                  
000015CC  4EB9 0000194A            544                  JSR         HANDLE_OPERAND          * Enter subroutine for source handling
000015D2                           545                  
000015D2  43F9 00001D5D            546                  LEA         CR_LF_MSG,A1            * Print New Line
000015D8  103C 000E                547                  MOVE.B      #14,D0
000015DC  4E4F                     548                  TRAP        #15
000015DE                           549  
000015DE  6000 FDCE                550                  BRA         OP_IDENT
000015E2                           551  * Parse_0 for BCHG.x #<data>,<ea>                
000015E2                           552  
000015E2                           553                  *MOVE.W      #$085C,$C068004C        * BCHG.B    #$44,(A4)+
000015E2                           554                  *MOVE.W      #$0044,$C068004E
000015E2                           555                  * 0000 1000 01 01 1-100
000015E2                           556                  * 0000 0000 11 00 0000
000015E2  3407                     557  PARSE_0_BCHG    MOVE.W      D7,D2                   * Need to check if the rest of the op code ends in 01
000015E4  223C 000000C0            558                  MOVE.L      #$00C0,D1               * BitMask to check 
000015EA  C441                     559                  AND.W       D1,D2
000015EC  EC4A                     560                  LSR.W       #6,D2                   * Shift the BitMask to compare
000015EE                           561                  
000015EE  0C02 0001                562                  CMPI.B      #%01,D2               * Is the rest of the op code 01?
000015F2  6600 FE7C                563                  BNE         NO_OP_MATCH             * If not equal: ERROR
000015F6                           564                  
000015F6  0C05 0000                565                  CMPI.B      #DR_DIRECT,D5           * Check if EA is Dn
000015FA  6700 001A                566                  BEQ         PARSE_0_BCHG_L          * If so, BCHG is long
000015FE                           567                  
000015FE  13FC 0001 00001DD8       568                  MOVE.B      #$01,OP_SIZE            * Special case: BCHG.B immediate data should always be WORD size 
00001606  43F9 00001D8F            569                  LEA         PRINT_BCHG_B,A1         * Print BCHG.B
0000160C  103C 000E                570                  MOVE.B      #14,D0
00001610  4E4F                     571                  TRAP        #15
00001612  6000 0016                572                  BRA         PARSE_BCHG_DATA
00001616                           573  
00001616  43F9 00001D97            574  PARSE_0_BCHG_L  LEA         PRINT_BCHG_L,A1         * Print BCHG.L
0000161C  103C 000E                575                  MOVE.B      #14,D0
00001620  4E4F                     576                  TRAP        #15
00001622  13FC 0002 00001DD8       577                  MOVE.B      #$02,OP_SIZE            * Set OP_SIZE to be long
0000162A                           578                  
0000162A  3A3C 0007                579  PARSE_BCHG_DATA MOVE.W      #$0007,D5               * Set immediate data mode
0000162E  3C3C 0004                580                  MOVE.W      #$0004,D6               * Set immediate data register
00001632  4EB9 0000194A            581                  JSR         HANDLE_OPERAND          * Enter Subroutine to print out immediate data
00001638  6000 FF70                582                  BRA         PARSE_0_EA
0000163C                           583  * Parse_0 for BCHG.x Dn,<ea> case:         
0000163C  0C05 0000                584  BCHG_DN         CMPI.B      #DR_DIRECT,D5           * Check if EA is Dn
00001640  6700 0012                585                  BEQ         BCHG_PRINT_L            * If so, BCHG is long
00001644                           586                  
00001644  43F9 00001D8F            587  BCHG_PRINT_B    LEA         PRINT_BCHG_B,A1         * Print BCHG.B
0000164A  103C 000E                588                  MOVE.B      #14,D0
0000164E  4E4F                     589                  TRAP        #15
00001650  6000 000E                590                  BRA         BCHG_PRINT_D        
00001654                           591                  
00001654  43F9 00001D97            592  BCHG_PRINT_L    LEA         PRINT_BCHG_L,A1         * Print BCHG.L
0000165A  103C 000E                593                  MOVE.B      #14,D0
0000165E  4E4F                     594                  TRAP        #15
00001660                           595  
00001660  43F9 00001CE6            596  BCHG_PRINT_D    LEA         PRINT_D,A1
00001666  103C 000E                597                  MOVE.B      #14,D0
0000166A  4E4F                     598                  TRAP        #15
0000166C                           599                  
0000166C  2207                     600                  MOVE.L      D7,D1                   * Move target register to D1
0000166E  283C 00000E00            601                  MOVE.L      #$0E00,D4
00001674  C284                     602                  AND.L       D4,D1
00001676                           603                  
00001676  E089                     604                  LSR.L       #8,D1                   * Shift 9 to get target register
00001678  E289                     605                  LSR.L       #1,D1
0000167A                           606                  
0000167A                           607                  ************************************************************************ FIX
0000167A  103C 000F                608                  MOVE.B      #15,D0                  * Print target register
0000167E  143C 000A                609                  MOVE.B      #10,D2
00001682  4E4F                     610                  TRAP        #15
00001684                           611  
00001684  6000 FF24                612                  BRA         PARSE_0_EA              * Branch to print parse 0 EA
00001688                           613  
00001688                           614  
00001688                           615  
00001688                           616  * MOVE.B
00001688  43F9 00001D62            617  PARSE_OP_1      LEA         PRINT_MOVE_B,A1
0000168E  103C 000E                618                  MOVE.B      #14,D0
00001692  4E4F                     619                  TRAP        #15
00001694                           620                  
00001694  13FC 0000 00001DD8       621                  MOVE.B      #$00,OP_SIZE            * Sets OP_SIZE to byte.
0000169C                           622                  
0000169C  3C07                     623                  MOVE.W      D7,D6                   * D6 stores replicate of 16 bits stored in D7
0000169E  3A3C 003F                624                  MOVE.W      #$003F,D5
000016A2  CC45                     625                  AND.W       D5,D6                   * D6 stores Source information
000016A4                           626                  
000016A4  3A3C 0007                627                  MOVE.W      #%000111,D5             * BitMask for Source register
000016A8  CA46                     628                  AND.W       D6,D5                   * D5 stores Source Register
000016AA  E64E                     629                  LSR.W       #3,D6                   * D6 stores Source Mode
000016AC                           630                  
000016AC  3806                     631                  MOVE.W      D6,D4                   * Temp memory for swap
000016AE  3C05                     632                  MOVE.W      D5,D6                   * D6 stores Source Register
000016B0  3A04                     633                  MOVE.W      D4,D5                   * D5 stores Source Mode
000016B2                           634                  
000016B2  4EB9 0000194A            635                  JSR         HANDLE_OPERAND          * Enter Subroutine for Source Handling
000016B8                           636                  
000016B8  43F9 00001CE8            637                  LEA         PRINT_COMMA,A1          * Print comma
000016BE  103C 000E                638                  MOVE.B      #14,D0
000016C2  4E4F                     639                  TRAP        #15         
000016C4                           640                  
000016C4                           641                 
000016C4  3C07                     642                  MOVE.W      D7,D6                   * D6 stores replicate of 16 bits stored in D7
000016C6  3A3C 0FC0                643                  MOVE.W      #$0FC0,D5
000016CA  CC45                     644                  AND.W       D5,D6                   * D6 stores only Destination information, not shifted.
000016CC  EC4E                     645                  LSR.W       #6,D6                   * D6 stores Destination info
000016CE                           646                  
000016CE  3A3C 0007                647                  MOVE.W      #%000111,D5             * BitMask for only mode
000016D2  CA46                     648                  AND.W       D6,D5                   * D5 stores Destination Mode
000016D4                           649                  
000016D4  E64E                     650                  LSR.W       #3,D6                   * D6 stores Destination Register
000016D6                           651                  
000016D6  4EB9 0000194A            652                  JSR         HANDLE_OPERAND
000016DC                           653                  
000016DC  43F9 00001D5D            654                  LEA         CR_LF_MSG,A1            * Print New Line
000016E2  103C 000E                655                  MOVE.B      #14,D0
000016E6  4E4F                     656                  TRAP        #15
000016E8                           657                  
000016E8  6000 FCC4                658                  BRA         OP_IDENT
000016EC                           659  
000016EC                           660  
000016EC                           661  * MOVE.L
000016EC                           662  PARSE_OP_2      
000016EC                           663  
000016EC                           664  * MOVE.W
000016EC                           665  PARSE_OP_3
000016EC                           666  
000016EC                           667  * CLR,RTS,JSR,MOVEM,LEA
000016EC                           668  PARSE_OP_4
000016EC                           669  
000016EC                           670  * ADDQ
000016EC                           671  PARSE_OP_5
000016EC                           672  
000016EC                           673  * BCC
000016EC                           674  PARSE_OP_6
000016EC                           675  
000016EC                           676  * MOVEQ
000016EC                           677  PARSE_OP_7
000016EC                           678  
000016EC                           679  * DIVS
000016EC                           680  PARSE_OP_8
000016EC                           681  
000016EC                           682  * SUB,SUBA
000016EC  343C 01C0                683  PARSE_OP_9      MOVE.W      #$01C0,D2       * Bitmask for retrieving Opmode.
000016F0  C447                     684                  AND.W       D7,D2           * D2 stores the opmode, unshifted
000016F2  EC4A                     685                  LSR.W       #6,D2           * D2 stores the opmode
000016F4                           686                  
000016F4  0C02 0003                687                  CMPI.B      #$03,D2
000016F8  6700 001E                688                  BEQ         SUB_A_WORD      
000016FC                           689                  
000016FC  0C02 0007                690                  CMPI.B      #$07,D2
00001700  6700 007C                691                  BEQ         SUB_A_LONG
00001704                           692                  
00001704  0C02 0002                693                  CMPI.B      #$02,D2
00001708  6F00 00DA                694                  BLE         SUB_EA_DN
0000170C                           695                  
0000170C  0C02 0006                696                  CMPI.B      #06,D2
00001710  6F00 0182                697                  BLE         SUB_DN_EA
00001714                           698                  
00001714  6000 0230                699                  BRA         EXIT_PARSE_OP_9
00001718                           700                  
00001718  43F9 00001D6A            701  SUB_A_WORD      LEA         PRINT_SUB_A_W,A1    * Print: SUBA.W
0000171E  103C 000E                702                  MOVE.B      #14,D0
00001722  4E4F                     703                  TRAP        #15
00001724                           704  
00001724  3C3C 0007                705                  MOVE.W      #$0007,D6
00001728  CC47                     706                  AND.W       D7,D6           * D6 stores the EA register
0000172A                           707                  
0000172A  3A3C 0038                708                  MOVE.W      #$0038,D5
0000172E  CA47                     709                  AND.W       D7,D5           * D5 stores the EA Mode, unshifted
00001730  E64D                     710                  LSR.W       #3,D5           * D5 stores the EA Mode
00001732                           711                  
00001732  13FC 0001 00001DD8       712                  MOVE.B      #$01,OP_SIZE    * Set OP_SIZE to Word (%01)
0000173A                           713                  
0000173A  4EB9 0000194A            714                  JSR         HANDLE_OPERAND
00001740                           715                  
00001740  43F9 00001CE8            716                  LEA         PRINT_COMMA,A1  * Print comma
00001746  103C 000E                717                  MOVE.B      #14,D0
0000174A  4E4F                     718                  TRAP        #15
0000174C                           719                  
0000174C  43F9 00001CEA            720                  LEA         PRINT_A,A1      * Print:  A
00001752  103C 000E                721                  MOVE.B      #14,D0
00001756  4E4F                     722                  TRAP        #15
00001758                           723                  
00001758  4281                     724                  CLR.L       D1              * Clear D1
0000175A  323C 0E00                725                  MOVE.W      #$0E00,D1
0000175E  C247                     726                  AND.W       D7,D1           * D1 stores the destination address register, unshifted
00001760  E049                     727                  LSR.W       #8,D1
00001762  E249                     728                  LSR.W       #1,D1           * D1 stores the destination address register, shifted
00001764                           729                  
00001764  103C 000F                730                  MOVE.B      #15,D0          * Print the destination address register
00001768  143C 000A                731                  MOVE.B      #10,D2
0000176C  4E4F                     732                  TRAP        #15
0000176E                           733                  
0000176E  43F9 00001D5D            734                  LEA         CR_LF_MSG,A1    * Print new line, carriage return
00001774  103C 000E                735                  MOVE.B      #14,D0
00001778  4E4F                     736                  TRAP        #15             
0000177A                           737                  
0000177A  6000 01CA                738                  BRA         EXIT_PARSE_OP_9
0000177E                           739  
0000177E  43F9 00001D72            740  SUB_A_LONG      LEA         PRINT_SUB_A_L,A1      * Print: SUBA.L
00001784  103C 000E                741                  MOVE.B      #14,D0
00001788  4E4F                     742                  TRAP        #15
0000178A                           743  
0000178A  3C3C 0007                744                  MOVE.W      #$0007,D6
0000178E  CC47                     745                  AND.W       D7,D6           * D6 stores the EA register
00001790                           746                  
00001790  3A3C 0038                747                  MOVE.W      #$0038,D5
00001794  CA47                     748                  AND.W       D7,D5           * D5 stores the EA Mode, unshifted
00001796  E64D                     749                  LSR.W       #3,D5           * D5 stores the EA Mode
00001798                           750                  
00001798  13FC 0002 00001DD8       751                  MOVE.B      #$02,OP_SIZE    * Set OP_SIZE to Long (%10)
000017A0                           752                  
000017A0  4EB9 0000194A            753                  JSR         HANDLE_OPERAND
000017A6                           754                  
000017A6  43F9 00001CE8            755                  LEA         PRINT_COMMA,A1  * Print comma
000017AC  103C 000E                756                  MOVE.B      #14,D0
000017B0  4E4F                     757                  TRAP        #15
000017B2                           758                  
000017B2  43F9 00001CEA            759                  LEA         PRINT_A,A1      * Print:  A
000017B8  103C 000E                760                  MOVE.B      #14,D0
000017BC  4E4F                     761                  TRAP        #15
000017BE                           762                  
000017BE  4281                     763                  CLR.L       D1              * Clear D1
000017C0  323C 0E00                764                  MOVE.W      #$0E00,D1       * Bitmask for destination address register
000017C4  C247                     765                  AND.W       D7,D1           * D1 stores the destination address register, unshifted
000017C6  E049                     766                  LSR.W       #8,D1
000017C8  E249                     767                  LSR.W       #1,D1           * D1 stores the destination address register, shifted
000017CA                           768                  
000017CA  103C 000F                769                  MOVE.B      #15,D0          * Print the destination address register
000017CE  143C 000A                770                  MOVE.B      #10,D2
000017D2  4E4F                     771                  TRAP        #15
000017D4                           772                  
000017D4  43F9 00001D5D            773                  LEA         CR_LF_MSG,A1    * Print new line, carriage return
000017DA  103C 000E                774                  MOVE.B      #14,D0
000017DE  4E4F                     775                  TRAP        #15   
000017E0                           776                  
000017E0  6000 0164                777                  BRA         EXIT_PARSE_OP_9
000017E4                           778  
000017E4  0C02 0000                779  SUB_EA_DN       CMPI.B      #$00,D2
000017E8  6700 0012                780                  BEQ         SUB_EA_DN_BYTE
000017EC                           781                  
000017EC  0C02 0001                782                  CMPI.B      #$01,D2
000017F0  6700 0022                783                  BEQ         SUB_EA_DN_WORD
000017F4                           784                  
000017F4  0C02 0002                785                  CMPI.B      #$02,D2
000017F8  6700 0032                786                  BEQ         SUB_EA_DN_LONG
000017FC                           787                  
000017FC  43F9 00001D7A            788  SUB_EA_DN_BYTE  LEA         PRINT_SUB_B,A1      * Print:  SUB.B
00001802  103C 000E                789                  MOVE.B      #14,D0
00001806  4E4F                     790                  TRAP        #15
00001808  13FC 0000 00001DD8       791                  MOVE.B      #$00,OP_SIZE        * Set OP_SIZE to byte
00001810  6000 0032                792                  BRA         RET_SUB_EA_DN       * Merge
00001814                           793                  
00001814  43F9 00001D81            794  SUB_EA_DN_WORD  LEA         PRINT_SUB_W,A1      * Print:  SUB.W
0000181A  103C 000E                795                  MOVE.B      #14,D0
0000181E  4E4F                     796                  TRAP        #15
00001820  13FC 0001 00001DD8       797                  MOVE.B      #$01,OP_SIZE        * Set OP_SIZE to word
00001828  6000 001A                798                  BRA         RET_SUB_EA_DN       * Merge
0000182C                           799                  
0000182C  43F9 00001D88            800  SUB_EA_DN_LONG  LEA         PRINT_SUB_L,A1
00001832  103C 000E                801                  MOVE.B      #14,D0
00001836  4E4F                     802                  TRAP        #15
00001838  13FC 0002 00001DD8       803                  MOVE.B      #$02,OP_SIZE        * Set OP_SIZE to long
00001840  6000 0002                804                  BRA         RET_SUB_EA_DN       * Merge
00001844                           805                  
00001844                           806                  
00001844  3C3C 0007                807  RET_SUB_EA_DN   MOVE.W      #$0007,D6           * Bitmask for EA Register
00001848  CC47                     808                  AND.W       D7,D6               * D6 stores EA Register
0000184A                           809                  
0000184A  3A3C 0038                810                  MOVE.W      #$0038,D5
0000184E  CA47                     811                  AND.W       D7,D5               * D5 stores EA Mode, unshifted
00001850  E64D                     812                  LSR.W       #3,D5               * D5 stores EA Mode
00001852                           813                  
00001852  4EB9 0000194A            814                  JSR         HANDLE_OPERAND
00001858                           815                  
00001858  43F9 00001CE8            816                  LEA         PRINT_COMMA,A1      * Print comma
0000185E  103C 000E                817                  MOVE.B      #14,D0
00001862  4E4F                     818                  TRAP        #15
00001864                           819                  
00001864  43F9 00001CE6            820                  LEA         PRINT_D,A1          * Print:  D
0000186A  103C 000E                821                  MOVE.B      #14,D0
0000186E  4E4F                     822                  TRAP        #15
00001870                           823                  
00001870  323C 0E00                824                  MOVE.W      #$0E00,D1
00001874  C247                     825                  AND.W       D7,D1               * D1 stores the destination register, unshifted
00001876  E049                     826                  LSR.W       #8,D1
00001878  E249                     827                  LSR.W       #1,D1               * D1 stored the destination register
0000187A                           828                  
0000187A  103C 000F                829                  MOVE.B      #15,D0
0000187E  143C 000A                830                  MOVE.B      #10,D2
00001882  4E4F                     831                  TRAP        #15                 * Print destination register
00001884                           832                  
00001884  43F9 00001D5D            833                  LEA         CR_LF_MSG,A1        * Print new line/carriage return
0000188A  103C 000E                834                  MOVE.B      #14,D0
0000188E  4E4F                     835                  TRAP        #15                
00001890                           836                  
00001890  6000 00B4                837                  BRA         EXIT_PARSE_OP_9
00001894                           838  
00001894  0C02 0004                839  SUB_DN_EA       CMPI.B      #$04,D2
00001898  6700 0012                840                  BEQ         SUB_DN_EA_BYTE
0000189C                           841                  
0000189C  0C02 0005                842                  CMPI.B      #$05,D2
000018A0  6700 0022                843                  BEQ         SUB_DN_EA_WORD
000018A4                           844                  
000018A4  0C02 0006                845                  CMPI.B      #$06,D2
000018A8  6700 0032                846                  BEQ         SUB_DN_EA_LONG
000018AC                           847                  
000018AC  43F9 00001D7A            848  SUB_DN_EA_BYTE  LEA         PRINT_SUB_B,A1      * Print:  SUB.B
000018B2  103C 000E                849                  MOVE.B      #14,D0
000018B6  4E4F                     850                  TRAP        #15
000018B8  13FC 0000 00001DD8       851                  MOVE.B      #$00,OP_SIZE        * Set OP_SIZE to byte
000018C0  6000 0032                852                  BRA         RET_SUB_DN_EA       * Merge
000018C4                           853                  
000018C4  43F9 00001D81            854  SUB_DN_EA_WORD  LEA         PRINT_SUB_W,A1      * Print:  SUB.W
000018CA  103C 000E                855                  MOVE.B      #14,D0
000018CE  4E4F                     856                  TRAP        #15
000018D0  13FC 0001 00001DD8       857                  MOVE.B      #$01,OP_SIZE        * Set OP_SIZE to word
000018D8  6000 001A                858                  BRA         RET_SUB_DN_EA       * Merge
000018DC                           859                  
000018DC  43F9 00001D88            860  SUB_DN_EA_LONG  LEA         PRINT_SUB_L,A1
000018E2  103C 000E                861                  MOVE.B      #14,D0
000018E6  4E4F                     862                  TRAP        #15
000018E8  13FC 0002 00001DD8       863                  MOVE.B      #$02,OP_SIZE        * Set OP_SIZE to long
000018F0  6000 0002                864                  BRA         RET_SUB_DN_EA       * Merge
000018F4                           865                  
000018F4                           866                  
000018F4  3C3C 0007                867  RET_SUB_DN_EA   MOVE.W      #$0007,D6           * Bitmask for EA Register
000018F8  CC47                     868                  AND.W       D7,D6               * D6 stores EA Register
000018FA                           869                  
000018FA  3A3C 0038                870                  MOVE.W      #$0038,D5
000018FE  CA47                     871                  AND.W       D7,D5               * D5 stores EA Mode, unshifted
00001900  E64D                     872                  LSR.W       #3,D5               * D5 stores EA Mode
00001902                           873                  
00001902  43F9 00001CE6            874                  LEA         PRINT_D,A1          * Print:  D
00001908  103C 000E                875                  MOVE.B      #14,D0
0000190C  4E4F                     876                  TRAP        #15
0000190E                           877                  
0000190E  4281                     878                  CLR.L       D1                  * Clear D1
00001910  323C 0E00                879                  MOVE.W      #$0E00,D1
00001914  C247                     880                  AND.W       D7,D1               * D1 stores the data register, unshifted
00001916  E049                     881                  LSR.W       #8,D1
00001918  E249                     882                  LSR.W       #1,D1               * D1 stored the data register
0000191A  103C 000F                883                  MOVE.B      #15,D0
0000191E  143C 000A                884                  MOVE.B      #10,D2
00001922  4E4F                     885                  TRAP        #15                 * Print destination register
00001924                           886                  
00001924  43F9 00001CE8            887                  LEA         PRINT_COMMA,A1      * Print comma
0000192A  103C 000E                888                  MOVE.B      #14,D0
0000192E  4E4F                     889                  TRAP        #15
00001930                           890                  
00001930  4EB9 0000194A            891                  JSR         HANDLE_OPERAND      * Print EA
00001936                           892                  
00001936  43F9 00001D5D            893                  LEA         CR_LF_MSG,A1        * Print new line/carriage return
0000193C  103C 000E                894                  MOVE.B      #14,D0
00001940  4E4F                     895                  TRAP        #15             
00001942  6000 0002                896                  BRA         EXIT_PARSE_OP_9
00001946                           897                  
00001946                           898                  
00001946  6000 FA66                899  EXIT_PARSE_OP_9 BRA         OP_IDENT
0000194A                           900  
0000194A                           901  * EOR,CMP,CMPA
0000194A                           902  PARSE_OP_B
0000194A                           903  
0000194A                           904  * AND,MULS
0000194A                           905  PARSE_OP_C
0000194A                           906  
0000194A                           907  * ADD,ADDA
0000194A                           908  PARSE_OP_D
0000194A                           909  
0000194A                           910  * ASL,ASR,LSL,LSR,ROL,ROR
0000194A                           911  PARSE_OP_E
0000194A                           912  
0000194A                           913  *********************************************************************************
0000194A                           914  *---------------------------Operand Subroutine----------------------------------*
0000194A                           915  *********************************************************************************
0000194A                           916  * D6 holds register.  
0000194A                           917  * D5 holds mode.  
0000194A                           918  * OP_SIZE holds size of operation: $00 = Byte, $01 = Word, $02 = Long
0000194A  48E7 0100                919  HANDLE_OPERAND          MOVEM.L     D7,-(SP)
0000194E                           920                          
0000194E  103C 0000                921                          MOVE.B      #DR_DIRECT,D0
00001952  BA00                     922                          CMP.B       D0,D5
00001954  6700 005E                923                          BEQ         OPERAND_MODE_0             * Branch to Data Register Direct: Dn
00001958                           924                          
00001958  103C 0001                925                          MOVE.B      #AR_DIRECT,D0
0000195C  BA00                     926                          CMP.B       D0,D5
0000195E  6700 006E                927                          BEQ         OPERAND_MODE_1             * Branch to Address Register Direct: An
00001962                           928                          
00001962  103C 0002                929                          MOVE.B      #AR_INDIRECT,D0
00001966  BA00                     930                          CMP.B       D0,D5
00001968  6700 007E                931                          BEQ         OPERAND_MODE_2             * Branch to Address Register Indirect: (An)
0000196C                           932                          
0000196C  103C 0003                933                          MOVE.B      #AR_INDIRECT_POST,D0
00001970  BA00                     934                          CMP.B       D0,D5
00001972  6700 009A                935                          BEQ         OPERAND_MODE_3             * Branch to Address Register Indirect w/Post-Incrementing: (An)+
00001976                           936                          
00001976  103C 0004                937                          MOVE.B      #AR_INDIRECT_PRE,D0
0000197A  BA00                     938                          CMP.B       D0,D5
0000197C  6700 00B8                939                          BEQ         OPERAND_MODE_4             * Branch to Address Register Indirect w/Pre-Decrimenting: -(An)
00001980                           940                          
00001980  103C 0007                941                          MOVE.B      #ABS_ADDR,D0
00001984  BA00                     942                          CMP.B       D0,D5
00001986  6700 00D6                943                          BEQ         OPERAND_MODE_7             * Branch to Absolute Addressing: 3 cases (xxx).W (xxx).L #<data>
0000198A                           944  
0000198A                           945  * Invalid Destination Mode Handling                        
0000198A  43F9 00001C89            946  INVALID_OPERAND_MODE    LEA         INVALID_OPERAND_MODE_MSG,A1        
00001990  103C 000E                947                          MOVE.B      #14,D0
00001994  4E4F                     948                          TRAP        #15                        * Print error message for Destination Mode
00001996                           949                          
00001996  2205                     950                          MOVE.L      D5,D1
00001998  103C 000F                951                          MOVE.B      #15,D0
0000199C  143C 0002                952                          MOVE.B      #2,D2
000019A0  4E4F                     953                          TRAP        #15                        * Print the problematic Destination mode
000019A2                           954                          
000019A2  43F9 00001D5D            955                          LEA         CR_LF_MSG,A1
000019A8  103C 000E                956                          MOVE.B      #14,D0
000019AC  4E4F                     957                          TRAP        #15                        * Print carriage return/new line
000019AE                           958                          
000019AE                           959                          
000019AE  4CDF 0080                960  EXIT_HANDLE_OPERAND     MOVEM.L     (SP)+,D7                   * Exit HANDLE_DESTINATION subroutine
000019B2  4E75                     961                          RTS
000019B4                           962  
000019B4                           963  * Complex part of destination handling
000019B4                           964  
000019B4                           965  * Data Register Direct                        
000019B4  43F9 00001CE6            966  OPERAND_MODE_0          LEA         PRINT_D,A1                 * Print D
000019BA  103C 000E                967                          MOVE.B      #14,D0
000019BE  4E4F                     968                          TRAP        #15
000019C0                           969                          
000019C0  2206                     970                          MOVE.L      D6,D1                      * Print target Register
000019C2  103C 000F                971                          MOVE.B      #15,D0
000019C6  143C 000A                972                          MOVE.B      #10,D2
000019CA  4E4F                     973                          TRAP        #15
000019CC                           974                          
000019CC                           975  * Code goes here
000019CC  60E0                     976                          BRA         EXIT_HANDLE_OPERAND
000019CE                           977  
000019CE                           978  * Address Register Direct
000019CE  43F9 00001CEA            979  OPERAND_MODE_1          LEA         PRINT_A,A1                  * Prints: A
000019D4  103C 000E                980                          MOVE.B      #14,D0
000019D8  4E4F                     981                          TRAP        #15
000019DA                           982                          
000019DA  2206                     983                          MOVE.L      D6,D1                       * Prints Register in Decimal
000019DC  103C 000F                984                          MOVE.B      #15,D0
000019E0  143C 000A                985                          MOVE.B      #10,D2
000019E4  4E4F                     986                          TRAP        #15
000019E6                           987     
000019E6  60C6                     988                          BRA         EXIT_HANDLE_OPERAND 
000019E8                           989  
000019E8                           990  * Address Register Indirect
000019E8  43F9 00001CEC            991  OPERAND_MODE_2          LEA         PRINT_A_INDIRECT,A1         * Prints: (A
000019EE  103C 000E                992                          MOVE.B      #14,D0
000019F2  4E4F                     993                          TRAP        #15
000019F4                           994                          
000019F4  2206                     995                          MOVE.L      D6,D1                       * Prints Register in Decimal
000019F6  103C 000F                996                          MOVE.B      #15,D0
000019FA  143C 000A                997                          MOVE.B      #10,D2
000019FE  4E4F                     998                          TRAP        #15
00001A00                           999                          
00001A00  43F9 00001CEF           1000                          LEA         PRINT_END_PAREN,A1          * Prints: )
00001A06  103C 000E               1001                          MOVE.B      #14,D0
00001A0A  4E4F                    1002                          TRAP        #15       
00001A0C                          1003  
00001A0C  60A0                    1004                          BRA         EXIT_HANDLE_OPERAND
00001A0E                          1005  
00001A0E                          1006  * Address Register Indirect w/Post-Incrementation
00001A0E  43F9 00001CEC           1007  OPERAND_MODE_3          LEA         PRINT_A_INDIRECT,A1         * Prints: (A
00001A14  103C 000E               1008                          MOVE.B      #14,D0
00001A18  4E4F                    1009                          TRAP        #15
00001A1A                          1010  
00001A1A  2206                    1011                          MOVE.L      D6,D1                       * Prints Register in Decimal
00001A1C  103C 000F               1012                          MOVE.B      #15,D0
00001A20  143C 000A               1013                          MOVE.B      #10,D2
00001A24  4E4F                    1014                          TRAP        #15
00001A26                          1015                          
00001A26  43F9 00001CF1           1016                          LEA         PRINT_END_PAREN_PLUS,A1     * Prints: )+
00001A2C  103C 000E               1017                          MOVE.B      #14,D0
00001A30  4E4F                    1018                          TRAP        #15                           
00001A32                          1019  
00001A32  6000 FF7A               1020                          BRA         EXIT_HANDLE_OPERAND
00001A36                          1021                          
00001A36                          1022  * Address Register Indirect w/Pre-Decrementation
00001A36  43F9 00001CF4           1023  OPERAND_MODE_4          LEA         PRINT_MINUS_A_INDIRECT,A1   * Prints: -(A
00001A3C  103C 000E               1024                          MOVE.B      #14,D0
00001A40  4E4F                    1025                          TRAP        #15
00001A42                          1026                          
00001A42  2206                    1027                          MOVE.L      D6,D1                       * Prints Register in Decimal
00001A44  103C 000F               1028                          MOVE.B      #15,D0
00001A48  143C 000A               1029                          MOVE.B      #10,D2
00001A4C  4E4F                    1030                          TRAP        #15
00001A4E                          1031                          
00001A4E  43F9 00001CEF           1032                          LEA         PRINT_END_PAREN,A1          * Prints: )
00001A54  103C 000E               1033                          MOVE.B      #14,D0
00001A58  4E4F                    1034                          TRAP        #15
00001A5A                          1035  
00001A5A  6000 FF52               1036                          BRA         EXIT_HANDLE_OPERAND
00001A5E                          1037                          
00001A5E                          1038  * Absolute Addressing
00001A5E  103C 0000               1039  OPERAND_MODE_7          MOVE.B      #ABS_ADDR_WORD_REG,D0       * Load %000 to D0
00001A62  BC00                    1040                          CMP.B       D0,D6
00001A64  6700 003E               1041                          BEQ         HANDLE_ABS_ADDR_WORD
00001A68                          1042                          
00001A68  103C 0001               1043                          MOVE.B      #ABS_ADDR_LONG_REG,D0       * Load %001 to D0
00001A6C  BC00                    1044                          CMP.B       D0,D6
00001A6E  6700 0054               1045                          BEQ         HANDLE_ABS_ADDR_LONG
00001A72                          1046                          
00001A72  103C 0004               1047                          MOVE.B      #IMMEDIATE_DATA,D0          * Load %100 to D0
00001A76  BC00                    1048                          CMP.B       D0,D6
00001A78  6700 0072               1049                          BEQ         HANDLE_IMMED_DATA
00001A7C                          1050  
00001A7C                          1051  * The address register stored in D6 is invalid.                        
00001A7C  43F9 00001CB1           1052  INVALID_ABS_ADDR_REG    LEA         INVALID_ABS_ADDR_REG_MSG,A1 * Print error message
00001A82  103C 000E               1053                          MOVE.B      #14,D0
00001A86  4E4F                    1054                          TRAP        #15
00001A88                          1055                          
00001A88  2206                    1056                          MOVE.L      D6,D1                       * Print invalid address register stored in D6
00001A8A  103C 000F               1057                          MOVE.B      #15,D0
00001A8E  143C 0002               1058                          MOVE.B      #2,D2
00001A92  4E4F                    1059                          TRAP        #15 
00001A94                          1060                          
00001A94  43F9 00001D5D           1061                          LEA         CR_LF_MSG,A1                * Print new Line
00001A9A  103C 000E               1062                          MOVE.B      #14,D0
00001A9E  4E4F                    1063                          TRAP        #15  
00001AA0                          1064                                                  
00001AA0                          1065  
00001AA0  6000 FF0C               1066  EXIT_OPERAND_MODE_7     BRA         EXIT_HANDLE_OPERAND 
00001AA4                          1067  
00001AA4                          1068  
00001AA4  43F9 00001CF7           1069  HANDLE_ABS_ADDR_WORD    LEA         PRINT_DOLLAR,A1
00001AAA  103C 000E               1070                          MOVE.B      #14,D0
00001AAE  4E4F                    1071                          TRAP        #15
00001AB0                          1072                          
00001AB0  181A                    1073                          MOVE.B      (A2)+,D4            * D4 stores a byte of the absolute address.
00001AB2  E14C                    1074                          LSL.W       #8,D4               * Shift D4 left 8 bits
00001AB4  181A                    1075                          MOVE.B      (A2)+,D4            * D4 stores word absolute address
00001AB6                          1076                          
00001AB6  2204                    1077                          MOVE.L      D4,D1               * Print absolute address
00001AB8  103C 000F               1078                          MOVE.B      #15,D0
00001ABC  143C 0010               1079                          MOVE.B      #16,D2
00001AC0  4E4F                    1080                          TRAP        #15
00001AC2                          1081                          
00001AC2  60DC                    1082                          BRA         EXIT_OPERAND_MODE_7
00001AC4                          1083  
00001AC4  43F9 00001CF7           1084  HANDLE_ABS_ADDR_LONG    LEA         PRINT_DOLLAR,A1
00001ACA  103C 000E               1085                          MOVE.B      #14,D0
00001ACE  4E4F                    1086                          TRAP        #15
00001AD0                          1087                          
00001AD0  181A                    1088                          MOVE.B      (A2)+,D4            * D4 stores a byte of the absolute address.
00001AD2  E18C                    1089                          LSL.L       #8,D4               * Shift D4 left 8 bits
00001AD4  181A                    1090                          MOVE.B      (A2)+,D4
00001AD6  E18C                    1091                          LSL.L       #8,D4
00001AD8  181A                    1092                          MOVE.B      (A2)+,D4            * D4 stores a byte of the absolute address.
00001ADA  E18C                    1093                          LSL.L       #8,D4               * Shift D4 left 8 bits
00001ADC  181A                    1094                          MOVE.B      (A2)+,D4            * D4 stores long absolute address
00001ADE                          1095  
00001ADE  2204                    1096                          MOVE.L      D4,D1               * Print absolute address
00001AE0  103C 000F               1097                          MOVE.B      #15,D0
00001AE4  143C 0010               1098                          MOVE.B      #16,D2
00001AE8  4E4F                    1099                          TRAP        #15
00001AEA                          1100  
00001AEA  60B4                    1101                          BRA         EXIT_OPERAND_MODE_7
00001AEC                          1102                          
00001AEC  43F9 00001CF9           1103  HANDLE_IMMED_DATA       LEA         PRINT_NUM_DOLLAR,A1
00001AF2  103C 000E               1104                          MOVE.B      #14,D0
00001AF6  4E4F                    1105                          TRAP        #15
00001AF8                          1106                          
00001AF8  4281                    1107                          CLR.L       D1                  * Clears D1
00001AFA  1239 00001DD8           1108                          MOVE.B      OP_SIZE,D1          * Set D1 to OP_SIZE ($00 = Byte, $01 = Word, $02 = Long)
00001B00                          1109                          
00001B00  0C01 0000               1110                          CMPI.B      #$00,D1
00001B04  6700 0014               1111                          BEQ         IMMED_DATA_BYTE
00001B08                          1112                          
00001B08  0C01 0001               1113                          CMPI.B      #$01,D1
00001B0C  6700 001A               1114                          BEQ         IMMED_DATA_WORD
00001B10                          1115                          
00001B10  0C01 0002               1116                          CMPI.B      #$02,D1
00001B14  6700 0024               1117                          BEQ         IMMED_DATA_LONG
00001B18                          1118                          
00001B18                          1119                          
00001B18  6086                    1120  EXIT_HANDLE_IMMED_DATA  BRA         EXIT_OPERAND_MODE_7
00001B1A                          1121  
00001B1A  121A                    1122  IMMED_DATA_BYTE         MOVE.B      (A2)+,D1            * Print byte of immediate data and move A2
00001B1C  103C 000F               1123                          MOVE.B      #15,D0
00001B20  143C 0010               1124                          MOVE.B      #16,D2
00001B24  4E4F                    1125                          TRAP        #15
00001B26                          1126                          
00001B26  60F0                    1127                          BRA         EXIT_HANDLE_IMMED_DATA
00001B28                          1128  
00001B28  121A                    1129  IMMED_DATA_WORD         MOVE.B      (A2)+,D1            * D1 stores a byte of the immediate data
00001B2A  E149                    1130                          LSL.W       #8,D1               * Shift D1 left 8 bits
00001B2C  121A                    1131                          MOVE.B      (A2)+,D1            * D1 stores immediate data word
00001B2E                          1132                          
00001B2E  103C 000F               1133                          MOVE.B      #15,D0              * Print immediate data word
00001B32  143C 0010               1134                          MOVE.B      #16,D2
00001B36  4E4F                    1135                          TRAP        #15
00001B38                          1136                          
00001B38  60DE                    1137                          BRA         EXIT_HANDLE_IMMED_DATA
00001B3A                          1138  
00001B3A  121A                    1139  IMMED_DATA_LONG         MOVE.B      (A2)+,D1            * D1 stores a byte of the immediate data
00001B3C  E189                    1140                          LSL.L       #8,D1               * Shift D1 left 8 bits
00001B3E  121A                    1141                          MOVE.B      (A2)+,D1
00001B40  E189                    1142                          LSL.L       #8,D1
00001B42  121A                    1143                          MOVE.B      (A2)+,D1            * D1 stores a byte of the immediate data
00001B44  E189                    1144                          LSL.L       #8,D1               * Shift D1 left 8 bits
00001B46  121A                    1145                          MOVE.B      (A2)+,D1            * D1 stores immediate data long
00001B48                          1146                          
00001B48  103C 000F               1147                          MOVE.B      #15,D0              * Print immediate data long
00001B4C  143C 0010               1148                          MOVE.B      #16,D2
00001B50  4E4F                    1149                          TRAP        #15
00001B52  60C4                    1150                          BRA         EXIT_HANDLE_IMMED_DATA
00001B54                          1151                       
00001B54                          1152  *********************************************************************************
00001B54                          1153  *-------------------------------------------------------------------------------*
00001B54                          1154  *********************************************************************************
00001B54                          1155  
00001B54                          1156  * -----------------------------------------------
00001B54                          1157  * Register Summary
00001B54                          1158  *     D0: Loop counter (Decrements from value in D2)
00001B54                          1159  *     D1: Value to be converted from hex to ASCII
00001B54                          1160  *     D2: Number of nibble values to be converted (000000ABF)
00001B54                          1161  *     D3: Resulting value in ASCII
00001B54                          1162  *     D7: Stores isolated LSB
00001B54                          1163  *
00001B54                          1164  * Concerns: Limited 4 ASCII character result (change to variable instead of D3?)
00001B54                          1165  *           Should I print the contents of D3 immediately or try and return it?
00001B54                          1166  *                Or store it into a variable as well? What about yucky 0's?
00001B54                          1167  * -----------------------------------------------
00001B54                          1168  
00001B54  48E7 F140               1169  HEX_TO_ASCII        MOVEM.L   A1/D0-D3/D7,-(SP) * Push registers onto the stack
00001B58  4280                    1170                      CLR.L     D0                * Clear loop counter register
00001B5A  4283                    1171                      CLR.L     D3                * Clear result value register
00001B5C  4287                    1172                      CLR.L     D7                * Clear isolated LSB register
00001B5E  49F9 00001DD9           1173                      LEA       ASCII_RESULT,A4   * Load memory location of result to A4
00001B64                          1174  
00001B64  3002                    1175  INIT_H2A_LOOP       MOVE.W    D2,D0             * Rotate until MSB is LSB 0000ABCD -> BCD0000A
00001B66  5540                    1176                      SUBI.W    #2,D0             * Subtract 2 from counter (1 for dumb loop, 1 to leave extra char)
00001B68  E899                    1177  MINI_LOOP           ROR.L     #4,D1
00001B6A  51C8 FFFC               1178                      DBRA      D0,MINI_LOOP
00001B6E                          1179  
00001B6E  3002                    1180                      MOVE.W    D2,D0             * Initialize loop counter to number of values to convert
00001B70  6000 0026               1181                      BRA       TEST              * Branch to TEST to deal with extra loop iteration
00001B74                          1182  
00001B74  3E3C 000F               1183  H2A_LOOP            MOVE.W    #$0000000F,D7     * Move bit mask to isolate LSB into D7
00001B78  CE81                    1184                      AND.L     D1,D7             * Store isolated LSB into D7  
00001B7A  E999                    1185                      ROL.L     #4,D1             * Shift value that's being converted by 4 bits
00001B7C                          1186  
00001B7C  0C87 00000009           1187                      CMPI.L    #9,D7             * Compare isolated LSB to highest value number
00001B82  6E00 000A               1188                      BGT       CONVERT_H2A_LETTER    * If greater than 9, branch to convert letter logic
00001B86  0607 0030               1189  CONVERT_H2A_NUMBER  ADDI.B    #48,D7            * Add 48 to convert from hex to ASCII number
00001B8A  6000 000A               1190                      BRA       STORE_VALUE       * Branch to store resulting value
00001B8E                          1191  
00001B8E  0607 0037               1192  CONVERT_H2A_LETTER  ADDI.B    #55,D7            * Add 55 to convert from hex to ASCII letter
00001B92  6000 0002               1193                      BRA       STORE_VALUE       * Branch to store resulting value
00001B96                          1194  
00001B96  18C7                    1195  STORE_VALUE         MOVE.B    D7,(A4)+          * Push the ASCII value onto the A4 stack
00001B98                          1196  
00001B98  51C8 FFDA               1197  TEST                DBRA      D0,H2A_LOOP       * Continue looping if counter is not -1
00001B9C                          1198  
00001B9C  18BC 0000               1199  H2A_LOOP_FINISH     MOVE.B    #$00,(A4) 
00001BA0                          1200                      
00001BA0                          1201                      * load ASCII chars directly into A1 to prep for printing
00001BA0                          1202                      
00001BA0                          1203  
00001BA0  4CDF 028F               1204                      MOVEM.L   (SP)+,A1/D0-D3/D7    * Pop registers back off the stack
00001BA4                          1205  
00001BA4  4E75                    1206                      RTS                         * Return from sub-routine
00001BA6                          1207  
00001BA6                          1208  
00001BA6                          1209  
00001BA6  223C 12345678           1210  END                 MOVE.L      #$12345678,D1
00001BAC  143C 0008               1211                      MOVE.B      #8,D2
00001BB0  4EB8 1B54               1212                      JSR         HEX_TO_ASCII
00001BB4                          1213                      
00001BB4  43F9 00001DD9           1214                      LEA         ASCII_RESULT,A1
00001BBA  103C 000E               1215                      MOVE.B      #14,D0
00001BBE  4E4F                    1216                      TRAP        #15
00001BC0                          1217                                
00001BC0  FFFF FFFF               1218      SIMHALT             ; halt simulator
00001BC4                          1219  
00001BC4                          1220  * Put variables and constants here
00001BC4  =00007000               1221  stack               EQU             $7000   * Stack pointer start location
00001BC4                          1222  
00001BC4  =0000000D               1223  CR                  EQU             $0D     * Carriage Return
00001BC4  =0000000A               1224  LF                  EQU             $0A     * Line Feed
00001BC4  =00000009               1225  HT                  EQU             $09     * Horizontal Tab
00001BC4                          1226  
00001BC4  =00000000               1227  OPCODE_0            EQU             %0000   * ANDI,SUBI,EORI,CMPI,BCHG
00001BC4  =00000001               1228  OPCODE_1            EQU             %0001   * MOVE.B
00001BC4  =00000002               1229  OPCODE_2            EQU             %0010   * MOVE.L
00001BC4  =00000003               1230  OPCODE_3            EQU             %0011   * MOVE.W
00001BC4  =00000004               1231  OPCODE_4            EQU             %0100   * CLR,RTS,JSR,MOVEM,LEA
00001BC4  =00000005               1232  OPCODE_5            EQU             %0101   * ADDQ
00001BC4  =00000006               1233  OPCODE_6            EQU             %0110   * BCC
00001BC4  =00000007               1234  OPCODE_7            EQU             %0111   * MOVEQ
00001BC4  =00000008               1235  OPCODE_8            EQU             %1000   * DIVS
00001BC4  =00000009               1236  OPCODE_9            EQU             %1001   * SUB,SUBA
00001BC4  =0000000B               1237  OPCODE_B            EQU             %1011   * EOR,CMP,CMPA
00001BC4  =0000000C               1238  OPCODE_C            EQU             %1100   * AND,MULS
00001BC4  =0000000D               1239  OPCODE_D            EQU             %1101   * ADD,ADDA
00001BC4  =0000000E               1240  OPCODE_E            EQU             %1110   * ASL,ASR,LSL,LSR,ROL,ROR
00001BC4                          1241  
00001BC4  =00000000               1242  DR_DIRECT           EQU             %000    * Data Register Direct Mode
00001BC4  =00000001               1243  AR_DIRECT           EQU             %001    * Address Register Direct Mode
00001BC4  =00000002               1244  AR_INDIRECT         EQU             %010    * Address Register Indirect Mode
00001BC4  =00000003               1245  AR_INDIRECT_POST    EQU             %011    * Address Register Indirect Post-Incrementing Mode
00001BC4  =00000004               1246  AR_INDIRECT_PRE     EQU             %100    * Address Register Inderect Pre-Decrementing Mode
00001BC4  =00000007               1247  ABS_ADDR            EQU             %111    * Absolute Address and Immediate Data Mode
00001BC4                          1248  
00001BC4  =00000000               1249  ABS_ADDR_WORD_REG   EQU             %000    * Absolute Word Address Register
00001BC4  =00000001               1250  ABS_ADDR_LONG_REG   EQU             %001    * Absolute Long Address Register
00001BC4  =00000004               1251  IMMEDIATE_DATA      EQU             %100    * Immediate Data Register
00001BC4                          1252  
00001BC4                          1253  
00001BC4= 57 65 6C 63 6F 6D ...   1254  LINE1               DC.B        'Welcome to our 68K Dissassembler.',CR,LF,0
00001BE8= 50 6C 65 61 73 65 ...   1255  GETSTARTMESSAGE     DC.B        'Please provide a valid start address.',CR,LF,0
00001C10= 50 6C 65 61 73 65 ...   1256  GETENDMESSAGE       DC.B        'Please provide a valid end address.',CR,LF,0
00001C36= 54 68 65 20 69 6E ...   1257  ERRORMESSAGESIZE    DC.B        'The input you have provided is not 32 bits long.  Please provide a valid address',CR,LF,0
00001C89= 54 68 65 20 66 6F ...   1258  INVALID_OPERAND_MODE_MSG   DC.B 'The following operand mode is invalid: ',0
00001CB1= 54 68 65 20 66 6F ...   1259  INVALID_ABS_ADDR_REG_MSG   DC.B 'The following absolute address register is invalid: ',0
00001CE6                          1260  
00001CE6= 44 00                   1261  PRINT_D             DC.B        'D',0
00001CE8= 2C 00                   1262  PRINT_COMMA         DC.B        ',',0
00001CEA= 41 00                   1263  PRINT_A             DC.B        'A',0
00001CEC= 28 41 00                1264  PRINT_A_INDIRECT    DC.B        '(A',0
00001CEF= 29 00                   1265  PRINT_END_PAREN     DC.B        ')',0
00001CF1= 29 2B 00                1266  PRINT_END_PAREN_PLUS    DC.B    ')+',0
00001CF4= 2D 28 00                1267  PRINT_MINUS_A_INDIRECT  DC.B    '-(',0
00001CF7= 24 00                   1268  PRINT_DOLLAR        DC.B        '$',0
00001CF9= 23 24 00                1269  PRINT_NUM_DOLLAR    DC.B        '#$',0
00001CFC                          1270  
00001CFC                          1271  
00001CFC= 54 68 69 73 20 6D ...   1272  BUGFIXMESSAGE       DC.B        'This message is loaded to resolve a bug, and should never be printed.',CR,LF,0
00001D44= 49 6E 76 61 6C 69 ...   1273  INVALID_OP_MSG      DC.B        'Invalid Operation Code: ',0
00001D5D= 0D 0A 00                1274  CR_LF_MSG           DC.B        CR,LF,0
00001D60= 09 00                   1275  TAB_MSG             DC.B        HT,0
00001D62                          1276  
00001D62= 4D 4F 56 45 2E 42 ...   1277  PRINT_MOVE_B        DC.B        'MOVE.B',HT,0
00001D6A= 53 55 42 41 2E 57 ...   1278  PRINT_SUB_A_W       DC.B        'SUBA.W',HT,0
00001D72= 53 55 42 41 2E 4C ...   1279  PRINT_SUB_A_L       DC.B        'SUBA.L',HT,0
00001D7A= 53 55 42 2E 42 09 00    1280  PRINT_SUB_B         DC.B        'SUB.B',HT,0
00001D81= 53 55 42 2E 57 09 00    1281  PRINT_SUB_W         DC.B        'SUB.W',HT,0
00001D88= 53 55 42 2E 4C 09 00    1282  PRINT_SUB_L         DC.B        'SUB.L',HT,0
00001D8F= 42 43 48 47 2E 42 ...   1283  PRINT_BCHG_B        DC.B        'BCHG.B',HT,0
00001D97= 42 43 48 47 2E 4C ...   1284  PRINT_BCHG_L        DC.B        'BCHG.L',HT,0
00001D9F= 41 4E 44 49 00          1285  PRINT_ANDI          DC.B        'ANDI',0
00001DA4= 53 55 42 49 00          1286  PRINT_SUBI          DC.B        'SUBI',0
00001DA9= 45 4F 52 49 00          1287  PRINT_EORI          DC.B        'EORI',0
00001DAE= 43 4D 50 49 00          1288  PRINT_CMPI          DC.B        'CMPI',0
00001DB3= 2E 42 09 00             1289  PRINT_B             DC.B        '.B',HT,0
00001DB7= 2E 57 09 00             1290  PRINT_W             DC.B        '.W',HT,0
00001DBB= 2E 4C 09 00             1291  PRINT_L             DC.B        '.L',HT,0
00001DBF                          1292  
00001DC0                          1293  STARTADDRSTRING1    DS.L        1
00001DC4                          1294  STARTADDRSTRING2    DS.L        1
00001DC8                          1295  HEXSTARTADDR        DS.L        1
00001DCC                          1296  
00001DCC                          1297  ENDADDRSTRING1      DS.L        1
00001DD0                          1298  ENDADDRSTRING2      DS.L        1
00001DD4                          1299  HEXENDADDR          DS.L        1
00001DD8                          1300  
00001DD8                          1301  OP_SIZE             DS.B        1
00001DD9                          1302  ASCII_RESULT        DS.B        9
00001DE2                          1303                      END     START           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABS_ADDR            7
ABS_ADDR_LONG_REG   1
ABS_ADDR_WORD_REG   0
AR_DIRECT           1
AR_INDIRECT         2
AR_INDIRECT_POST    3
AR_INDIRECT_PRE     4
ASCII_RESULT        1DD9
BCHG_DN             163C
BCHG_PRINT_B        1644
BCHG_PRINT_D        1660
BCHG_PRINT_L        1654
BEGIN_OP_IDENT      13A8
BUGFIXMESSAGE       1CFC
CHARISLETTER        10F6
CHARISLETTER2       1138
CHARISLETTER3       118A
CHARISLETTER4       11CC
CHARISNUM           10E2
CHARISNUM2          1124
CHARISNUM3          1176
CHARISNUM4          11B8
COMBINEEND          11E0
COMBINESTART        114C
CONVERTEND1         115C
CONVERTEND2         119E
CONVERTSTART1       10C8
CONVERTSTART2       110A
CONVERT_H2A_LETTER  1B8E
CONVERT_H2A_NUMBER  1B86
CR                  D
CR_LF_MSG           1D5D
DR_DIRECT           0
END                 1BA6
ENDADDR             107C
ENDADDRSTRING1      1DCC
ENDADDRSTRING2      1DD0
ERRORINPUTSIZE      1062
ERRORMESSAGESIZE    1C36
EXIT_HANDLE_IMMED_DATA  1B18
EXIT_HANDLE_OPERAND  19AE
EXIT_OPERAND_MODE_7  1AA0
EXIT_PARSE_OP_9     1946
GETENDMESSAGE       1C10
GETSTARTMESSAGE     1BE8
H2A_LOOP            1B74
H2A_LOOP_FINISH     1B9C
HANDLE_ABS_ADDR_LONG  1AC4
HANDLE_ABS_ADDR_WORD  1AA4
HANDLE_IMMED_DATA   1AEC
HANDLE_OPERAND      194A
HEXENDADDR          1DD4
HEXSTARTADDR        1DC8
HEX_TO_ASCII        1B54
HT                  9
IMMEDIATE_DATA      4
IMMED_DATA_BYTE     1B1A
IMMED_DATA_LONG     1B3A
IMMED_DATA_WORD     1B28
INIT_H2A_LOOP       1B64
INVALID_ABS_ADDR_REG  1A7C
INVALID_ABS_ADDR_REG_MSG  1CB1
INVALID_OPERAND_MODE  198A
INVALID_OPERAND_MODE_MSG  1C89
INVALID_OP_MSG      1D44
LF                  A
LINE1               1BC4
LOADENDADDR1        10AE
LOADENDADDR2        10C0
LOADSTARTADDR1      1044
LOADSTARTADDR2      1056
MINI_LOOP           1B68
NEXTCHAR            10DA
NEXTCHAR2           111C
NEXTCHAR3           116E
NEXTCHAR4           11B0
NO_OP_MATCH         1470
OPCODE_0            0
OPCODE_1            1
OPCODE_2            2
OPCODE_3            3
OPCODE_4            4
OPCODE_5            5
OPCODE_6            6
OPCODE_7            7
OPCODE_8            8
OPCODE_9            9
OPCODE_B            B
OPCODE_C            C
OPCODE_D            D
OPCODE_E            E
OPERAND_MODE_0      19B4
OPERAND_MODE_1      19CE
OPERAND_MODE_2      19E8
OPERAND_MODE_3      1A0E
OPERAND_MODE_4      1A36
OPERAND_MODE_7      1A5E
OP_IDENT            13AE
OP_SIZE             1DD8
PARSE_0_ANDI        14F6
PARSE_0_BCHG        15E2
PARSE_0_BCHG_L      1616
PARSE_0_CMPI        1526
PARSE_0_EA          15AA
PARSE_0_EORI        1516
PARSE_0_IMMDATA     159C
PARSE_0_SIZE        1536
PARSE_0_SIZE_B      1558
PARSE_0_SIZE_L      1588
PARSE_0_SIZE_W      1570
PARSE_0_SUBI        1506
PARSE_BCHG_DATA     162A
PARSE_OF_0_CMP      14CA
PARSE_OP_0          1498
PARSE_OP_1          1688
PARSE_OP_2          16EC
PARSE_OP_3          16EC
PARSE_OP_4          16EC
PARSE_OP_5          16EC
PARSE_OP_6          16EC
PARSE_OP_7          16EC
PARSE_OP_8          16EC
PARSE_OP_9          16EC
PARSE_OP_B          194A
PARSE_OP_C          194A
PARSE_OP_D          194A
PARSE_OP_E          194A
PRINT_A             1CEA
PRINT_ANDI          1D9F
PRINT_A_INDIRECT    1CEC
PRINT_B             1DB3
PRINT_BCHG_B        1D8F
PRINT_BCHG_L        1D97
PRINT_CMPI          1DAE
PRINT_COMMA         1CE8
PRINT_D             1CE6
PRINT_DOLLAR        1CF7
PRINT_END_PAREN     1CEF
PRINT_END_PAREN_PLUS  1CF1
PRINT_EORI          1DA9
PRINT_L             1DBB
PRINT_MINUS_A_INDIRECT  1CF4
PRINT_MOVE_B        1D62
PRINT_NUM_DOLLAR    1CF9
PRINT_SUBI          1DA4
PRINT_SUB_A_L       1D72
PRINT_SUB_A_W       1D6A
PRINT_SUB_B         1D7A
PRINT_SUB_L         1D88
PRINT_SUB_W         1D81
PRINT_W             1DB7
PROMPTENDADDR       1090
PROMPTSTARTADDR     1026
RET_SUB_DN_EA       18F4
RET_SUB_EA_DN       1844
STACK               7000
START               1000
STARTADDRSTRING1    1DC0
STARTADDRSTRING2    1DC4
STORE_VALUE         1B96
SUB_A_LONG          177E
SUB_A_WORD          1718
SUB_DN_EA           1894
SUB_DN_EA_BYTE      18AC
SUB_DN_EA_LONG      18DC
SUB_DN_EA_WORD      18C4
SUB_EA_DN           17E4
SUB_EA_DN_BYTE      17FC
SUB_EA_DN_LONG      182C
SUB_EA_DN_WORD      1814
TAB_MSG             1D60
TEST                1B98
